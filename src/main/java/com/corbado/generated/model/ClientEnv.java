/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * ClientEnv
 */
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:20:08.389669505Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ClientEnv {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_HANDLE = "handle";
  @SerializedName(SERIALIZED_NAME_HANDLE)
  @javax.annotation.Nonnull
  private String handle;

  public static final String SERIALIZED_NAME_BROWSER_NAME = "browserName";
  @SerializedName(SERIALIZED_NAME_BROWSER_NAME)
  @javax.annotation.Nonnull
  private String browserName;

  public static final String SERIALIZED_NAME_BROWSER_VERSION = "browserVersion";
  @SerializedName(SERIALIZED_NAME_BROWSER_VERSION)
  @javax.annotation.Nonnull
  private String browserVersion;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  @javax.annotation.Nonnull
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  @javax.annotation.Nonnull
  private String osVersion;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  @javax.annotation.Nonnull
  private String userAgent;

  public static final String SERIALIZED_NAME_JS_FINGERPRINT = "jsFingerprint";
  @SerializedName(SERIALIZED_NAME_JS_FINGERPRINT)
  @javax.annotation.Nonnull
  private String jsFingerprint;

  public static final String SERIALIZED_NAME_CREATED_MS = "createdMs";
  @SerializedName(SERIALIZED_NAME_CREATED_MS)
  @javax.annotation.Nonnull
  private Long createdMs;

  public static final String SERIALIZED_NAME_DEVICE_ID = "deviceId";
  @SerializedName(SERIALIZED_NAME_DEVICE_ID)
  @javax.annotation.Nullable
  private String deviceId;

  public ClientEnv() {
  }

  public ClientEnv id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public ClientEnv handle(@javax.annotation.Nonnull String handle) {
    this.handle = handle;
    return this;
  }

  /**
   * Get handle
   * @return handle
   */
  @javax.annotation.Nonnull
  public String getHandle() {
    return handle;
  }

  public void setHandle(@javax.annotation.Nonnull String handle) {
    this.handle = handle;
  }


  public ClientEnv browserName(@javax.annotation.Nonnull String browserName) {
    this.browserName = browserName;
    return this;
  }

  /**
   * Get browserName
   * @return browserName
   */
  @javax.annotation.Nonnull
  public String getBrowserName() {
    return browserName;
  }

  public void setBrowserName(@javax.annotation.Nonnull String browserName) {
    this.browserName = browserName;
  }


  public ClientEnv browserVersion(@javax.annotation.Nonnull String browserVersion) {
    this.browserVersion = browserVersion;
    return this;
  }

  /**
   * Get browserVersion
   * @return browserVersion
   */
  @javax.annotation.Nonnull
  public String getBrowserVersion() {
    return browserVersion;
  }

  public void setBrowserVersion(@javax.annotation.Nonnull String browserVersion) {
    this.browserVersion = browserVersion;
  }


  public ClientEnv osName(@javax.annotation.Nonnull String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * Get osName
   * @return osName
   */
  @javax.annotation.Nonnull
  public String getOsName() {
    return osName;
  }

  public void setOsName(@javax.annotation.Nonnull String osName) {
    this.osName = osName;
  }


  public ClientEnv osVersion(@javax.annotation.Nonnull String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Get osVersion
   * @return osVersion
   */
  @javax.annotation.Nonnull
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(@javax.annotation.Nonnull String osVersion) {
    this.osVersion = osVersion;
  }


  public ClientEnv userAgent(@javax.annotation.Nonnull String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nonnull
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(@javax.annotation.Nonnull String userAgent) {
    this.userAgent = userAgent;
  }


  public ClientEnv jsFingerprint(@javax.annotation.Nonnull String jsFingerprint) {
    this.jsFingerprint = jsFingerprint;
    return this;
  }

  /**
   * Get jsFingerprint
   * @return jsFingerprint
   */
  @javax.annotation.Nonnull
  public String getJsFingerprint() {
    return jsFingerprint;
  }

  public void setJsFingerprint(@javax.annotation.Nonnull String jsFingerprint) {
    this.jsFingerprint = jsFingerprint;
  }


  public ClientEnv createdMs(@javax.annotation.Nonnull Long createdMs) {
    this.createdMs = createdMs;
    return this;
  }

  /**
   * Get createdMs
   * @return createdMs
   */
  @javax.annotation.Nonnull
  public Long getCreatedMs() {
    return createdMs;
  }

  public void setCreatedMs(@javax.annotation.Nonnull Long createdMs) {
    this.createdMs = createdMs;
  }


  public ClientEnv deviceId(@javax.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

  /**
   * Get deviceId
   * @return deviceId
   */
  @javax.annotation.Nullable
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(@javax.annotation.Nullable String deviceId) {
    this.deviceId = deviceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientEnv clientEnv = (ClientEnv) o;
    return Objects.equals(this.id, clientEnv.id) &&
        Objects.equals(this.handle, clientEnv.handle) &&
        Objects.equals(this.browserName, clientEnv.browserName) &&
        Objects.equals(this.browserVersion, clientEnv.browserVersion) &&
        Objects.equals(this.osName, clientEnv.osName) &&
        Objects.equals(this.osVersion, clientEnv.osVersion) &&
        Objects.equals(this.userAgent, clientEnv.userAgent) &&
        Objects.equals(this.jsFingerprint, clientEnv.jsFingerprint) &&
        Objects.equals(this.createdMs, clientEnv.createdMs) &&
        Objects.equals(this.deviceId, clientEnv.deviceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, handle, browserName, browserVersion, osName, osVersion, userAgent, jsFingerprint, createdMs, deviceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientEnv {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    handle: ").append(toIndentedString(handle)).append("\n");
    sb.append("    browserName: ").append(toIndentedString(browserName)).append("\n");
    sb.append("    browserVersion: ").append(toIndentedString(browserVersion)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    jsFingerprint: ").append(toIndentedString(jsFingerprint)).append("\n");
    sb.append("    createdMs: ").append(toIndentedString(createdMs)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("id", "handle", "browserName", "browserVersion", "osName", "osVersion", "userAgent", "jsFingerprint", "createdMs", "deviceId"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("id", "handle", "browserName", "browserVersion", "osName", "osVersion", "userAgent", "jsFingerprint", "createdMs"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientEnv
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientEnv.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in ClientEnv is not found in the empty JSON string", ClientEnv.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientEnv.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `ClientEnv` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientEnv.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("handle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `handle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handle").toString()));
      }
      if (!jsonObj.get("browserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `browserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserName").toString()));
      }
      if (!jsonObj.get("browserVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `browserVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browserVersion").toString()));
      }
      if (!jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if (!jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if (!jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if (!jsonObj.get("jsFingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `jsFingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jsFingerprint").toString()));
      }
      if ((jsonObj.get("deviceId") != null && !jsonObj.get("deviceId").isJsonNull()) && !jsonObj.get("deviceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `deviceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientEnv.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientEnv' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientEnv> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientEnv.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientEnv>() {
           @Override
           public void write(JsonWriter out, ClientEnv value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientEnv read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientEnv given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientEnv
   * @throws IOException if the JSON string is invalid with respect to ClientEnv
   */
  public static ClientEnv fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientEnv.class);
  }

  /**
   * Convert an instance of ClientEnv to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

