/*
 * Corbado Backend API
 *  # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import com.corbado.generated.model.WebhookEventType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.corbado.generated.invoker.JSON;

/**
 * WebhookEndpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-08T15:52:19.373962904Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class WebhookEndpoint {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  @javax.annotation.Nonnull
  private Object customHeaders;

  public static final String SERIALIZED_NAME_SUBSCRIBED_EVENTS = "subscribedEvents";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED_EVENTS)
  @javax.annotation.Nonnull
  private List<WebhookEventType> subscribedEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nonnull
  private String created;

  public static final String SERIALIZED_NAME_CREATED_MS = "createdMs";
  @SerializedName(SERIALIZED_NAME_CREATED_MS)
  @javax.annotation.Nonnull
  private Long createdMs;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  @javax.annotation.Nonnull
  private String updated;

  public static final String SERIALIZED_NAME_UPDATED_MS = "updatedMs";
  @SerializedName(SERIALIZED_NAME_UPDATED_MS)
  @javax.annotation.Nonnull
  private Long updatedMs;

  public WebhookEndpoint() {
  }

  public WebhookEndpoint id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public WebhookEndpoint url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public WebhookEndpoint customHeaders(@javax.annotation.Nonnull Object customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  /**
   * Get customHeaders
   * @return customHeaders
   */
  @javax.annotation.Nonnull
  public Object getCustomHeaders() {
    return customHeaders;
  }

  public void setCustomHeaders(@javax.annotation.Nonnull Object customHeaders) {
    this.customHeaders = customHeaders;
  }


  public WebhookEndpoint subscribedEvents(@javax.annotation.Nonnull List<WebhookEventType> subscribedEvents) {
    this.subscribedEvents = subscribedEvents;
    return this;
  }

  public WebhookEndpoint addSubscribedEventsItem(WebhookEventType subscribedEventsItem) {
    if (this.subscribedEvents == null) {
      this.subscribedEvents = new ArrayList<>();
    }
    this.subscribedEvents.add(subscribedEventsItem);
    return this;
  }

  /**
   * Get subscribedEvents
   * @return subscribedEvents
   */
  @javax.annotation.Nonnull
  public List<WebhookEventType> getSubscribedEvents() {
    return subscribedEvents;
  }

  public void setSubscribedEvents(@javax.annotation.Nonnull List<WebhookEventType> subscribedEvents) {
    this.subscribedEvents = subscribedEvents;
  }


  public WebhookEndpoint created(@javax.annotation.Nonnull String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nonnull String created) {
    this.created = created;
  }


  public WebhookEndpoint createdMs(@javax.annotation.Nonnull Long createdMs) {
    this.createdMs = createdMs;
    return this;
  }

  /**
   * Get createdMs
   * @return createdMs
   */
  @javax.annotation.Nonnull
  public Long getCreatedMs() {
    return createdMs;
  }

  public void setCreatedMs(@javax.annotation.Nonnull Long createdMs) {
    this.createdMs = createdMs;
  }


  public WebhookEndpoint updated(@javax.annotation.Nonnull String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nonnull
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(@javax.annotation.Nonnull String updated) {
    this.updated = updated;
  }


  public WebhookEndpoint updatedMs(@javax.annotation.Nonnull Long updatedMs) {
    this.updatedMs = updatedMs;
    return this;
  }

  /**
   * Get updatedMs
   * @return updatedMs
   */
  @javax.annotation.Nonnull
  public Long getUpdatedMs() {
    return updatedMs;
  }

  public void setUpdatedMs(@javax.annotation.Nonnull Long updatedMs) {
    this.updatedMs = updatedMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEndpoint webhookEndpoint = (WebhookEndpoint) o;
    return Objects.equals(this.id, webhookEndpoint.id) &&
        Objects.equals(this.url, webhookEndpoint.url) &&
        Objects.equals(this.customHeaders, webhookEndpoint.customHeaders) &&
        Objects.equals(this.subscribedEvents, webhookEndpoint.subscribedEvents) &&
        Objects.equals(this.created, webhookEndpoint.created) &&
        Objects.equals(this.createdMs, webhookEndpoint.createdMs) &&
        Objects.equals(this.updated, webhookEndpoint.updated) &&
        Objects.equals(this.updatedMs, webhookEndpoint.updatedMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, url, customHeaders, subscribedEvents, created, createdMs, updated, updatedMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEndpoint {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    subscribedEvents: ").append(toIndentedString(subscribedEvents)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdMs: ").append(toIndentedString(createdMs)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updatedMs: ").append(toIndentedString(updatedMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("customHeaders");
    openapiFields.add("subscribedEvents");
    openapiFields.add("created");
    openapiFields.add("createdMs");
    openapiFields.add("updated");
    openapiFields.add("updatedMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("customHeaders");
    openapiRequiredFields.add("subscribedEvents");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("createdMs");
    openapiRequiredFields.add("updated");
    openapiRequiredFields.add("updatedMs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookEndpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookEndpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEndpoint is not found in the empty JSON string", WebhookEndpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookEndpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEndpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEndpoint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("subscribedEvents") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subscribedEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscribedEvents` to be an array in the JSON string but got `%s`", jsonObj.get("subscribedEvents").toString()));
      }
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEndpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEndpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEndpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEndpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEndpoint>() {
           @Override
           public void write(JsonWriter out, WebhookEndpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEndpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookEndpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookEndpoint
   * @throws IOException if the JSON string is invalid with respect to WebhookEndpoint
   */
  public static WebhookEndpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEndpoint.class);
  }

  /**
   * Convert an instance of WebhookEndpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

