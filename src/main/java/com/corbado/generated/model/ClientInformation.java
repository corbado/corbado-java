/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.JavaScriptHighEntropy;
import com.corbado.generated.model.NativeMeta;
import com.corbado.generated.model.ParsedDeviceInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * ClientInformation
 */
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:23:59.197916542Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ClientInformation {
  public static final String SERIALIZED_NAME_REMOTE_ADDRESS = "remoteAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDRESS)
  @javax.annotation.Nonnull
  private String remoteAddress;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  @javax.annotation.Nonnull
  private String userAgent;

  public static final String SERIALIZED_NAME_CLIENT_ENV_HANDLE = "clientEnvHandle";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENV_HANDLE)
  @javax.annotation.Nullable
  private String clientEnvHandle;

  public static final String SERIALIZED_NAME_JAVASCRIPT_FINGERPRINT = "javascriptFingerprint";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT_FINGERPRINT)
  @javax.annotation.Nullable
  private String javascriptFingerprint;

  public static final String SERIALIZED_NAME_JAVA_SCRIPT_HIGH_ENTROPY = "javaScriptHighEntropy";
  @SerializedName(SERIALIZED_NAME_JAVA_SCRIPT_HIGH_ENTROPY)
  @javax.annotation.Nullable
  private JavaScriptHighEntropy javaScriptHighEntropy;

  public static final String SERIALIZED_NAME_BLUETOOTH_AVAILABLE = "bluetoothAvailable";
  @SerializedName(SERIALIZED_NAME_BLUETOOTH_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean bluetoothAvailable;

  public static final String SERIALIZED_NAME_PASSWORD_MANAGER_AVAILABLE = "passwordManagerAvailable";
  @SerializedName(SERIALIZED_NAME_PASSWORD_MANAGER_AVAILABLE)
  @javax.annotation.Nullable
  private Boolean passwordManagerAvailable;

  public static final String SERIALIZED_NAME_USER_VERIFYING_PLATFORM_AUTHENTICATOR_AVAILABLE = "userVerifyingPlatformAuthenticatorAvailable";
  @SerializedName(SERIALIZED_NAME_USER_VERIFYING_PLATFORM_AUTHENTICATOR_AVAILABLE)
  @javax.annotation.Nonnull
  private Boolean userVerifyingPlatformAuthenticatorAvailable;

  public static final String SERIALIZED_NAME_CONDITIONAL_MEDIATION_AVAILABLE = "conditionalMediationAvailable";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_MEDIATION_AVAILABLE)
  @javax.annotation.Nonnull
  private Boolean conditionalMediationAvailable;

  public static final String SERIALIZED_NAME_PRIVATE_MODE = "privateMode";
  @SerializedName(SERIALIZED_NAME_PRIVATE_MODE)
  @javax.annotation.Nullable
  private Boolean privateMode;

  public static final String SERIALIZED_NAME_PARSED_DEVICE_INFO = "parsedDeviceInfo";
  @SerializedName(SERIALIZED_NAME_PARSED_DEVICE_INFO)
  @javax.annotation.Nonnull
  private ParsedDeviceInfo parsedDeviceInfo;

  public static final String SERIALIZED_NAME_NATIVE_META = "nativeMeta";
  @SerializedName(SERIALIZED_NAME_NATIVE_META)
  @javax.annotation.Nullable
  private NativeMeta nativeMeta;

  public ClientInformation() {
  }

  public ClientInformation remoteAddress(@javax.annotation.Nonnull String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

  /**
   * Client&#39;s IP address
   * @return remoteAddress
   */
  @javax.annotation.Nonnull
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(@javax.annotation.Nonnull String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }


  public ClientInformation userAgent(@javax.annotation.Nonnull String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Client&#39;s user agent
   * @return userAgent
   */
  @javax.annotation.Nonnull
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(@javax.annotation.Nonnull String userAgent) {
    this.userAgent = userAgent;
  }


  public ClientInformation clientEnvHandle(@javax.annotation.Nullable String clientEnvHandle) {
    this.clientEnvHandle = clientEnvHandle;
    return this;
  }

  /**
   * Client&#39;s environment handle
   * @return clientEnvHandle
   */
  @javax.annotation.Nullable
  public String getClientEnvHandle() {
    return clientEnvHandle;
  }

  public void setClientEnvHandle(@javax.annotation.Nullable String clientEnvHandle) {
    this.clientEnvHandle = clientEnvHandle;
  }


  public ClientInformation javascriptFingerprint(@javax.annotation.Nullable String javascriptFingerprint) {
    this.javascriptFingerprint = javascriptFingerprint;
    return this;
  }

  /**
   * Client&#39;s fingerprint
   * @return javascriptFingerprint
   */
  @javax.annotation.Nullable
  public String getJavascriptFingerprint() {
    return javascriptFingerprint;
  }

  public void setJavascriptFingerprint(@javax.annotation.Nullable String javascriptFingerprint) {
    this.javascriptFingerprint = javascriptFingerprint;
  }


  public ClientInformation javaScriptHighEntropy(@javax.annotation.Nullable JavaScriptHighEntropy javaScriptHighEntropy) {
    this.javaScriptHighEntropy = javaScriptHighEntropy;
    return this;
  }

  /**
   * Get javaScriptHighEntropy
   * @return javaScriptHighEntropy
   */
  @javax.annotation.Nullable
  public JavaScriptHighEntropy getJavaScriptHighEntropy() {
    return javaScriptHighEntropy;
  }

  public void setJavaScriptHighEntropy(@javax.annotation.Nullable JavaScriptHighEntropy javaScriptHighEntropy) {
    this.javaScriptHighEntropy = javaScriptHighEntropy;
  }


  public ClientInformation bluetoothAvailable(@javax.annotation.Nullable Boolean bluetoothAvailable) {
    this.bluetoothAvailable = bluetoothAvailable;
    return this;
  }

  /**
   * Client&#39;s Bluetooth availability
   * @return bluetoothAvailable
   */
  @javax.annotation.Nullable
  public Boolean getBluetoothAvailable() {
    return bluetoothAvailable;
  }

  public void setBluetoothAvailable(@javax.annotation.Nullable Boolean bluetoothAvailable) {
    this.bluetoothAvailable = bluetoothAvailable;
  }


  public ClientInformation passwordManagerAvailable(@javax.annotation.Nullable Boolean passwordManagerAvailable) {
    this.passwordManagerAvailable = passwordManagerAvailable;
    return this;
  }

  /**
   * Client&#39;s password manager availability
   * @return passwordManagerAvailable
   */
  @javax.annotation.Nullable
  public Boolean getPasswordManagerAvailable() {
    return passwordManagerAvailable;
  }

  public void setPasswordManagerAvailable(@javax.annotation.Nullable Boolean passwordManagerAvailable) {
    this.passwordManagerAvailable = passwordManagerAvailable;
  }


  public ClientInformation userVerifyingPlatformAuthenticatorAvailable(@javax.annotation.Nonnull Boolean userVerifyingPlatformAuthenticatorAvailable) {
    this.userVerifyingPlatformAuthenticatorAvailable = userVerifyingPlatformAuthenticatorAvailable;
    return this;
  }

  /**
   * Get userVerifyingPlatformAuthenticatorAvailable
   * @return userVerifyingPlatformAuthenticatorAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getUserVerifyingPlatformAuthenticatorAvailable() {
    return userVerifyingPlatformAuthenticatorAvailable;
  }

  public void setUserVerifyingPlatformAuthenticatorAvailable(@javax.annotation.Nonnull Boolean userVerifyingPlatformAuthenticatorAvailable) {
    this.userVerifyingPlatformAuthenticatorAvailable = userVerifyingPlatformAuthenticatorAvailable;
  }


  public ClientInformation conditionalMediationAvailable(@javax.annotation.Nonnull Boolean conditionalMediationAvailable) {
    this.conditionalMediationAvailable = conditionalMediationAvailable;
    return this;
  }

  /**
   * Get conditionalMediationAvailable
   * @return conditionalMediationAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getConditionalMediationAvailable() {
    return conditionalMediationAvailable;
  }

  public void setConditionalMediationAvailable(@javax.annotation.Nonnull Boolean conditionalMediationAvailable) {
    this.conditionalMediationAvailable = conditionalMediationAvailable;
  }


  public ClientInformation privateMode(@javax.annotation.Nullable Boolean privateMode) {
    this.privateMode = privateMode;
    return this;
  }

  /**
   * Get privateMode
   * @return privateMode
   */
  @javax.annotation.Nullable
  public Boolean getPrivateMode() {
    return privateMode;
  }

  public void setPrivateMode(@javax.annotation.Nullable Boolean privateMode) {
    this.privateMode = privateMode;
  }


  public ClientInformation parsedDeviceInfo(@javax.annotation.Nonnull ParsedDeviceInfo parsedDeviceInfo) {
    this.parsedDeviceInfo = parsedDeviceInfo;
    return this;
  }

  /**
   * Get parsedDeviceInfo
   * @return parsedDeviceInfo
   */
  @javax.annotation.Nonnull
  public ParsedDeviceInfo getParsedDeviceInfo() {
    return parsedDeviceInfo;
  }

  public void setParsedDeviceInfo(@javax.annotation.Nonnull ParsedDeviceInfo parsedDeviceInfo) {
    this.parsedDeviceInfo = parsedDeviceInfo;
  }


  public ClientInformation nativeMeta(@javax.annotation.Nullable NativeMeta nativeMeta) {
    this.nativeMeta = nativeMeta;
    return this;
  }

  /**
   * Get nativeMeta
   * @return nativeMeta
   */
  @javax.annotation.Nullable
  public NativeMeta getNativeMeta() {
    return nativeMeta;
  }

  public void setNativeMeta(@javax.annotation.Nullable NativeMeta nativeMeta) {
    this.nativeMeta = nativeMeta;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ClientInformation instance itself
   */
  public ClientInformation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientInformation clientInformation = (ClientInformation) o;
    return Objects.equals(this.remoteAddress, clientInformation.remoteAddress) &&
        Objects.equals(this.userAgent, clientInformation.userAgent) &&
        Objects.equals(this.clientEnvHandle, clientInformation.clientEnvHandle) &&
        Objects.equals(this.javascriptFingerprint, clientInformation.javascriptFingerprint) &&
        Objects.equals(this.javaScriptHighEntropy, clientInformation.javaScriptHighEntropy) &&
        Objects.equals(this.bluetoothAvailable, clientInformation.bluetoothAvailable) &&
        Objects.equals(this.passwordManagerAvailable, clientInformation.passwordManagerAvailable) &&
        Objects.equals(this.userVerifyingPlatformAuthenticatorAvailable, clientInformation.userVerifyingPlatformAuthenticatorAvailable) &&
        Objects.equals(this.conditionalMediationAvailable, clientInformation.conditionalMediationAvailable) &&
        Objects.equals(this.privateMode, clientInformation.privateMode) &&
        Objects.equals(this.parsedDeviceInfo, clientInformation.parsedDeviceInfo) &&
        Objects.equals(this.nativeMeta, clientInformation.nativeMeta)&&
        Objects.equals(this.additionalProperties, clientInformation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteAddress, userAgent, clientEnvHandle, javascriptFingerprint, javaScriptHighEntropy, bluetoothAvailable, passwordManagerAvailable, userVerifyingPlatformAuthenticatorAvailable, conditionalMediationAvailable, privateMode, parsedDeviceInfo, nativeMeta, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientInformation {\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    clientEnvHandle: ").append(toIndentedString(clientEnvHandle)).append("\n");
    sb.append("    javascriptFingerprint: ").append(toIndentedString(javascriptFingerprint)).append("\n");
    sb.append("    javaScriptHighEntropy: ").append(toIndentedString(javaScriptHighEntropy)).append("\n");
    sb.append("    bluetoothAvailable: ").append(toIndentedString(bluetoothAvailable)).append("\n");
    sb.append("    passwordManagerAvailable: ").append(toIndentedString(passwordManagerAvailable)).append("\n");
    sb.append("    userVerifyingPlatformAuthenticatorAvailable: ").append(toIndentedString(userVerifyingPlatformAuthenticatorAvailable)).append("\n");
    sb.append("    conditionalMediationAvailable: ").append(toIndentedString(conditionalMediationAvailable)).append("\n");
    sb.append("    privateMode: ").append(toIndentedString(privateMode)).append("\n");
    sb.append("    parsedDeviceInfo: ").append(toIndentedString(parsedDeviceInfo)).append("\n");
    sb.append("    nativeMeta: ").append(toIndentedString(nativeMeta)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("remoteAddress", "userAgent", "clientEnvHandle", "javascriptFingerprint", "javaScriptHighEntropy", "bluetoothAvailable", "passwordManagerAvailable", "userVerifyingPlatformAuthenticatorAvailable", "conditionalMediationAvailable", "privateMode", "parsedDeviceInfo", "nativeMeta"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("remoteAddress", "userAgent", "userVerifyingPlatformAuthenticatorAvailable", "conditionalMediationAvailable", "parsedDeviceInfo"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in ClientInformation is not found in the empty JSON string", ClientInformation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("remoteAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `remoteAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteAddress").toString()));
      }
      if (!jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("clientEnvHandle") != null && !jsonObj.get("clientEnvHandle").isJsonNull()) && !jsonObj.get("clientEnvHandle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `clientEnvHandle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEnvHandle").toString()));
      }
      if ((jsonObj.get("javascriptFingerprint") != null && !jsonObj.get("javascriptFingerprint").isJsonNull()) && !jsonObj.get("javascriptFingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `javascriptFingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javascriptFingerprint").toString()));
      }
      // validate the optional field `javaScriptHighEntropy`
      if (jsonObj.get("javaScriptHighEntropy") != null && !jsonObj.get("javaScriptHighEntropy").isJsonNull()) {
        JavaScriptHighEntropy.validateJsonElement(jsonObj.get("javaScriptHighEntropy"));
      }
      // validate the required field `parsedDeviceInfo`
      ParsedDeviceInfo.validateJsonElement(jsonObj.get("parsedDeviceInfo"));
      // validate the optional field `nativeMeta`
      if (jsonObj.get("nativeMeta") != null && !jsonObj.get("nativeMeta").isJsonNull()) {
        NativeMeta.validateJsonElement(jsonObj.get("nativeMeta"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientInformation>() {
           @Override
           public void write(JsonWriter out, ClientInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ClientInformation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientInformation
   * @throws IOException if the JSON string is invalid with respect to ClientInformation
   */
  public static ClientInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientInformation.class);
  }

  /**
   * Convert an instance of ClientInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

