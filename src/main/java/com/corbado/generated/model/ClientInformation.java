/*
 * Corbado Backend API
 *  # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import com.corbado.generated.model.JavaScriptHighEntropy;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.corbado.generated.invoker.JSON;

/**
 * ClientInformation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-02T14:34:22.087477742Z[Etc/UTC]", comments = "Generator version: 7.8.0-SNAPSHOT")
public class ClientInformation {
  public static final String SERIALIZED_NAME_REMOTE_ADDRESS = "remoteAddress";
  @SerializedName(SERIALIZED_NAME_REMOTE_ADDRESS)
  private String remoteAddress;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private String userAgent;

  public static final String SERIALIZED_NAME_CLIENT_ENV_HANDLE = "clientEnvHandle";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENV_HANDLE)
  private String clientEnvHandle;

  public static final String SERIALIZED_NAME_JAVASCRIPT_FINGERPRINT = "javascriptFingerprint";
  @SerializedName(SERIALIZED_NAME_JAVASCRIPT_FINGERPRINT)
  private String javascriptFingerprint;

  public static final String SERIALIZED_NAME_JAVA_SCRIPT_HIGH_ENTROPY = "javaScriptHighEntropy";
  @SerializedName(SERIALIZED_NAME_JAVA_SCRIPT_HIGH_ENTROPY)
  private JavaScriptHighEntropy javaScriptHighEntropy;

  public static final String SERIALIZED_NAME_BLUETOOTH_AVAILABLE = "bluetoothAvailable";
  @SerializedName(SERIALIZED_NAME_BLUETOOTH_AVAILABLE)
  private Boolean bluetoothAvailable;

  public static final String SERIALIZED_NAME_PASSWORD_MANAGER_AVAILABLE = "passwordManagerAvailable";
  @SerializedName(SERIALIZED_NAME_PASSWORD_MANAGER_AVAILABLE)
  private Boolean passwordManagerAvailable;

  public static final String SERIALIZED_NAME_USER_VERIFYING_PLATFORM_AUTHENTICATOR_AVAILABLE = "userVerifyingPlatformAuthenticatorAvailable";
  @SerializedName(SERIALIZED_NAME_USER_VERIFYING_PLATFORM_AUTHENTICATOR_AVAILABLE)
  private Boolean userVerifyingPlatformAuthenticatorAvailable;

  public ClientInformation() {
  }

  public ClientInformation remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

  /**
   * Client&#39;s IP address
   * @return remoteAddress
   */
  @javax.annotation.Nonnull
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }


  public ClientInformation userAgent(String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Client&#39;s user agent
   * @return userAgent
   */
  @javax.annotation.Nonnull
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }


  public ClientInformation clientEnvHandle(String clientEnvHandle) {
    this.clientEnvHandle = clientEnvHandle;
    return this;
  }

  /**
   * Client&#39;s environment handle
   * @return clientEnvHandle
   */
  @javax.annotation.Nullable
  public String getClientEnvHandle() {
    return clientEnvHandle;
  }

  public void setClientEnvHandle(String clientEnvHandle) {
    this.clientEnvHandle = clientEnvHandle;
  }


  public ClientInformation javascriptFingerprint(String javascriptFingerprint) {
    this.javascriptFingerprint = javascriptFingerprint;
    return this;
  }

  /**
   * Client&#39;s fingerprint
   * @return javascriptFingerprint
   */
  @javax.annotation.Nullable
  public String getJavascriptFingerprint() {
    return javascriptFingerprint;
  }

  public void setJavascriptFingerprint(String javascriptFingerprint) {
    this.javascriptFingerprint = javascriptFingerprint;
  }


  public ClientInformation javaScriptHighEntropy(JavaScriptHighEntropy javaScriptHighEntropy) {
    this.javaScriptHighEntropy = javaScriptHighEntropy;
    return this;
  }

  /**
   * Get javaScriptHighEntropy
   * @return javaScriptHighEntropy
   */
  @javax.annotation.Nullable
  public JavaScriptHighEntropy getJavaScriptHighEntropy() {
    return javaScriptHighEntropy;
  }

  public void setJavaScriptHighEntropy(JavaScriptHighEntropy javaScriptHighEntropy) {
    this.javaScriptHighEntropy = javaScriptHighEntropy;
  }


  public ClientInformation bluetoothAvailable(Boolean bluetoothAvailable) {
    this.bluetoothAvailable = bluetoothAvailable;
    return this;
  }

  /**
   * Client&#39;s Bluetooth availability
   * @return bluetoothAvailable
   */
  @javax.annotation.Nullable
  public Boolean getBluetoothAvailable() {
    return bluetoothAvailable;
  }

  public void setBluetoothAvailable(Boolean bluetoothAvailable) {
    this.bluetoothAvailable = bluetoothAvailable;
  }


  public ClientInformation passwordManagerAvailable(Boolean passwordManagerAvailable) {
    this.passwordManagerAvailable = passwordManagerAvailable;
    return this;
  }

  /**
   * Client&#39;s password manager availability
   * @return passwordManagerAvailable
   */
  @javax.annotation.Nullable
  public Boolean getPasswordManagerAvailable() {
    return passwordManagerAvailable;
  }

  public void setPasswordManagerAvailable(Boolean passwordManagerAvailable) {
    this.passwordManagerAvailable = passwordManagerAvailable;
  }


  public ClientInformation userVerifyingPlatformAuthenticatorAvailable(Boolean userVerifyingPlatformAuthenticatorAvailable) {
    this.userVerifyingPlatformAuthenticatorAvailable = userVerifyingPlatformAuthenticatorAvailable;
    return this;
  }

  /**
   * Get userVerifyingPlatformAuthenticatorAvailable
   * @return userVerifyingPlatformAuthenticatorAvailable
   */
  @javax.annotation.Nonnull
  public Boolean getUserVerifyingPlatformAuthenticatorAvailable() {
    return userVerifyingPlatformAuthenticatorAvailable;
  }

  public void setUserVerifyingPlatformAuthenticatorAvailable(Boolean userVerifyingPlatformAuthenticatorAvailable) {
    this.userVerifyingPlatformAuthenticatorAvailable = userVerifyingPlatformAuthenticatorAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientInformation clientInformation = (ClientInformation) o;
    return Objects.equals(this.remoteAddress, clientInformation.remoteAddress) &&
        Objects.equals(this.userAgent, clientInformation.userAgent) &&
        Objects.equals(this.clientEnvHandle, clientInformation.clientEnvHandle) &&
        Objects.equals(this.javascriptFingerprint, clientInformation.javascriptFingerprint) &&
        Objects.equals(this.javaScriptHighEntropy, clientInformation.javaScriptHighEntropy) &&
        Objects.equals(this.bluetoothAvailable, clientInformation.bluetoothAvailable) &&
        Objects.equals(this.passwordManagerAvailable, clientInformation.passwordManagerAvailable) &&
        Objects.equals(this.userVerifyingPlatformAuthenticatorAvailable, clientInformation.userVerifyingPlatformAuthenticatorAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteAddress, userAgent, clientEnvHandle, javascriptFingerprint, javaScriptHighEntropy, bluetoothAvailable, passwordManagerAvailable, userVerifyingPlatformAuthenticatorAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientInformation {\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    clientEnvHandle: ").append(toIndentedString(clientEnvHandle)).append("\n");
    sb.append("    javascriptFingerprint: ").append(toIndentedString(javascriptFingerprint)).append("\n");
    sb.append("    javaScriptHighEntropy: ").append(toIndentedString(javaScriptHighEntropy)).append("\n");
    sb.append("    bluetoothAvailable: ").append(toIndentedString(bluetoothAvailable)).append("\n");
    sb.append("    passwordManagerAvailable: ").append(toIndentedString(passwordManagerAvailable)).append("\n");
    sb.append("    userVerifyingPlatformAuthenticatorAvailable: ").append(toIndentedString(userVerifyingPlatformAuthenticatorAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("remoteAddress");
    openapiFields.add("userAgent");
    openapiFields.add("clientEnvHandle");
    openapiFields.add("javascriptFingerprint");
    openapiFields.add("javaScriptHighEntropy");
    openapiFields.add("bluetoothAvailable");
    openapiFields.add("passwordManagerAvailable");
    openapiFields.add("userVerifyingPlatformAuthenticatorAvailable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("remoteAddress");
    openapiRequiredFields.add("userAgent");
    openapiRequiredFields.add("userVerifyingPlatformAuthenticatorAvailable");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientInformation is not found in the empty JSON string", ClientInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientInformation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("remoteAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteAddress").toString()));
      }
      if (!jsonObj.get("userAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userAgent").toString()));
      }
      if ((jsonObj.get("clientEnvHandle") != null && !jsonObj.get("clientEnvHandle").isJsonNull()) && !jsonObj.get("clientEnvHandle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEnvHandle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEnvHandle").toString()));
      }
      if ((jsonObj.get("javascriptFingerprint") != null && !jsonObj.get("javascriptFingerprint").isJsonNull()) && !jsonObj.get("javascriptFingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `javascriptFingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("javascriptFingerprint").toString()));
      }
      // validate the optional field `javaScriptHighEntropy`
      if (jsonObj.get("javaScriptHighEntropy") != null && !jsonObj.get("javaScriptHighEntropy").isJsonNull()) {
        JavaScriptHighEntropy.validateJsonElement(jsonObj.get("javaScriptHighEntropy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientInformation>() {
           @Override
           public void write(JsonWriter out, ClientInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientInformation
   * @throws IOException if the JSON string is invalid with respect to ClientInformation
   */
  public static ClientInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientInformation.class);
  }

  /**
   * Convert an instance of ClientInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

