/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.PasskeyEventType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * PasskeyEventCreateReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:27:41.845066631Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class PasskeyEventCreateReq {
  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  @javax.annotation.Nonnull
  private PasskeyEventType eventType;

  public static final String SERIALIZED_NAME_EXPIRES = "expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  @javax.annotation.Nullable
  private Integer expires;

  public static final String SERIALIZED_NAME_PROCESS_I_D = "processID";
  @SerializedName(SERIALIZED_NAME_PROCESS_I_D)
  @javax.annotation.Nullable
  private String processID;

  public static final String SERIALIZED_NAME_CLIENT_ENV_I_D = "clientEnvID";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENV_I_D)
  @javax.annotation.Nullable
  private String clientEnvID;

  public static final String SERIALIZED_NAME_CREDENTIAL_I_D = "credentialID";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_I_D)
  @javax.annotation.Nullable
  private String credentialID;

  public static final String SERIALIZED_NAME_CHALLENGE = "challenge";
  @SerializedName(SERIALIZED_NAME_CHALLENGE)
  @javax.annotation.Nullable
  private String challenge;

  public PasskeyEventCreateReq() {
  }

  public PasskeyEventCreateReq eventType(@javax.annotation.Nonnull PasskeyEventType eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nonnull
  public PasskeyEventType getEventType() {
    return eventType;
  }

  public void setEventType(@javax.annotation.Nonnull PasskeyEventType eventType) {
    this.eventType = eventType;
  }


  public PasskeyEventCreateReq expires(@javax.annotation.Nullable Integer expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Get expires
   * @return expires
   */
  @javax.annotation.Nullable
  public Integer getExpires() {
    return expires;
  }

  public void setExpires(@javax.annotation.Nullable Integer expires) {
    this.expires = expires;
  }


  public PasskeyEventCreateReq processID(@javax.annotation.Nullable String processID) {
    this.processID = processID;
    return this;
  }

  /**
   * Get processID
   * @return processID
   */
  @javax.annotation.Nullable
  public String getProcessID() {
    return processID;
  }

  public void setProcessID(@javax.annotation.Nullable String processID) {
    this.processID = processID;
  }


  public PasskeyEventCreateReq clientEnvID(@javax.annotation.Nullable String clientEnvID) {
    this.clientEnvID = clientEnvID;
    return this;
  }

  /**
   * Get clientEnvID
   * @return clientEnvID
   */
  @javax.annotation.Nullable
  public String getClientEnvID() {
    return clientEnvID;
  }

  public void setClientEnvID(@javax.annotation.Nullable String clientEnvID) {
    this.clientEnvID = clientEnvID;
  }


  public PasskeyEventCreateReq credentialID(@javax.annotation.Nullable String credentialID) {
    this.credentialID = credentialID;
    return this;
  }

  /**
   * Get credentialID
   * @return credentialID
   */
  @javax.annotation.Nullable
  public String getCredentialID() {
    return credentialID;
  }

  public void setCredentialID(@javax.annotation.Nullable String credentialID) {
    this.credentialID = credentialID;
  }


  public PasskeyEventCreateReq challenge(@javax.annotation.Nullable String challenge) {
    this.challenge = challenge;
    return this;
  }

  /**
   * Get challenge
   * @return challenge
   */
  @javax.annotation.Nullable
  public String getChallenge() {
    return challenge;
  }

  public void setChallenge(@javax.annotation.Nullable String challenge) {
    this.challenge = challenge;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PasskeyEventCreateReq instance itself
   */
  public PasskeyEventCreateReq putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasskeyEventCreateReq passkeyEventCreateReq = (PasskeyEventCreateReq) o;
    return Objects.equals(this.eventType, passkeyEventCreateReq.eventType) &&
        Objects.equals(this.expires, passkeyEventCreateReq.expires) &&
        Objects.equals(this.processID, passkeyEventCreateReq.processID) &&
        Objects.equals(this.clientEnvID, passkeyEventCreateReq.clientEnvID) &&
        Objects.equals(this.credentialID, passkeyEventCreateReq.credentialID) &&
        Objects.equals(this.challenge, passkeyEventCreateReq.challenge)&&
        Objects.equals(this.additionalProperties, passkeyEventCreateReq.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, expires, processID, clientEnvID, credentialID, challenge, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasskeyEventCreateReq {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    processID: ").append(toIndentedString(processID)).append("\n");
    sb.append("    clientEnvID: ").append(toIndentedString(clientEnvID)).append("\n");
    sb.append("    credentialID: ").append(toIndentedString(credentialID)).append("\n");
    sb.append("    challenge: ").append(toIndentedString(challenge)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("eventType", "expires", "processID", "clientEnvID", "credentialID", "challenge"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("eventType"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasskeyEventCreateReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasskeyEventCreateReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PasskeyEventCreateReq is not found in the empty JSON string", PasskeyEventCreateReq.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PasskeyEventCreateReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `eventType`
      PasskeyEventType.validateJsonElement(jsonObj.get("eventType"));
      if ((jsonObj.get("processID") != null && !jsonObj.get("processID").isJsonNull()) && !jsonObj.get("processID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `processID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processID").toString()));
      }
      if ((jsonObj.get("clientEnvID") != null && !jsonObj.get("clientEnvID").isJsonNull()) && !jsonObj.get("clientEnvID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `clientEnvID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEnvID").toString()));
      }
      if ((jsonObj.get("credentialID") != null && !jsonObj.get("credentialID").isJsonNull()) && !jsonObj.get("credentialID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `credentialID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialID").toString()));
      }
      if ((jsonObj.get("challenge") != null && !jsonObj.get("challenge").isJsonNull()) && !jsonObj.get("challenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `challenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challenge").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasskeyEventCreateReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasskeyEventCreateReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasskeyEventCreateReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasskeyEventCreateReq.class));

       return (TypeAdapter<T>) new TypeAdapter<PasskeyEventCreateReq>() {
           @Override
           public void write(JsonWriter out, PasskeyEventCreateReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PasskeyEventCreateReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PasskeyEventCreateReq instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasskeyEventCreateReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasskeyEventCreateReq
   * @throws IOException if the JSON string is invalid with respect to PasskeyEventCreateReq
   */
  public static PasskeyEventCreateReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasskeyEventCreateReq.class);
  }

  /**
   * Convert an instance of PasskeyEventCreateReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

