/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.SocialProviderType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * SocialAccountCreateReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-11T08:44:44.623070219Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class SocialAccountCreateReq {
  public static final String SERIALIZED_NAME_PROVIDER_TYPE = "providerType";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TYPE)
  @javax.annotation.Nonnull
  private SocialProviderType providerType;

  public static final String SERIALIZED_NAME_IDENTIFIER_VALUE = "identifierValue";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_VALUE)
  @javax.annotation.Nonnull
  private String identifierValue;

  public static final String SERIALIZED_NAME_FOREIGN_I_D = "foreignID";
  @SerializedName(SERIALIZED_NAME_FOREIGN_I_D)
  @javax.annotation.Nonnull
  private String foreignID;

  public static final String SERIALIZED_NAME_AVATAR_U_R_L = "avatarURL";
  @SerializedName(SERIALIZED_NAME_AVATAR_U_R_L)
  @javax.annotation.Nonnull
  private String avatarURL;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nonnull
  private String fullName;

  public SocialAccountCreateReq() {
  }

  public SocialAccountCreateReq providerType(@javax.annotation.Nonnull SocialProviderType providerType) {
    this.providerType = providerType;
    return this;
  }

  /**
   * Get providerType
   * @return providerType
   */
  @javax.annotation.Nonnull
  public SocialProviderType getProviderType() {
    return providerType;
  }

  public void setProviderType(@javax.annotation.Nonnull SocialProviderType providerType) {
    this.providerType = providerType;
  }


  public SocialAccountCreateReq identifierValue(@javax.annotation.Nonnull String identifierValue) {
    this.identifierValue = identifierValue;
    return this;
  }

  /**
   * Login identifier of the user (here email address).
   * @return identifierValue
   */
  @javax.annotation.Nonnull
  public String getIdentifierValue() {
    return identifierValue;
  }

  public void setIdentifierValue(@javax.annotation.Nonnull String identifierValue) {
    this.identifierValue = identifierValue;
  }


  public SocialAccountCreateReq foreignID(@javax.annotation.Nonnull String foreignID) {
    this.foreignID = foreignID;
    return this;
  }

  /**
   * Unique identifier of the user in the social provider.
   * @return foreignID
   */
  @javax.annotation.Nonnull
  public String getForeignID() {
    return foreignID;
  }

  public void setForeignID(@javax.annotation.Nonnull String foreignID) {
    this.foreignID = foreignID;
  }


  public SocialAccountCreateReq avatarURL(@javax.annotation.Nonnull String avatarURL) {
    this.avatarURL = avatarURL;
    return this;
  }

  /**
   * URL of the avatar of the user in the social provider.
   * @return avatarURL
   */
  @javax.annotation.Nonnull
  public String getAvatarURL() {
    return avatarURL;
  }

  public void setAvatarURL(@javax.annotation.Nonnull String avatarURL) {
    this.avatarURL = avatarURL;
  }


  public SocialAccountCreateReq fullName(@javax.annotation.Nonnull String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name of the user in the social provider.
   * @return fullName
   */
  @javax.annotation.Nonnull
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nonnull String fullName) {
    this.fullName = fullName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SocialAccountCreateReq instance itself
   */
  public SocialAccountCreateReq putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SocialAccountCreateReq socialAccountCreateReq = (SocialAccountCreateReq) o;
    return Objects.equals(this.providerType, socialAccountCreateReq.providerType) &&
        Objects.equals(this.identifierValue, socialAccountCreateReq.identifierValue) &&
        Objects.equals(this.foreignID, socialAccountCreateReq.foreignID) &&
        Objects.equals(this.avatarURL, socialAccountCreateReq.avatarURL) &&
        Objects.equals(this.fullName, socialAccountCreateReq.fullName)&&
        Objects.equals(this.additionalProperties, socialAccountCreateReq.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(providerType, identifierValue, foreignID, avatarURL, fullName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SocialAccountCreateReq {\n");
    sb.append("    providerType: ").append(toIndentedString(providerType)).append("\n");
    sb.append("    identifierValue: ").append(toIndentedString(identifierValue)).append("\n");
    sb.append("    foreignID: ").append(toIndentedString(foreignID)).append("\n");
    sb.append("    avatarURL: ").append(toIndentedString(avatarURL)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("providerType", "identifierValue", "foreignID", "avatarURL", "fullName"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("providerType", "identifierValue", "foreignID", "avatarURL", "fullName"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SocialAccountCreateReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SocialAccountCreateReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in SocialAccountCreateReq is not found in the empty JSON string", SocialAccountCreateReq.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SocialAccountCreateReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `providerType`
      SocialProviderType.validateJsonElement(jsonObj.get("providerType"));
      if (!jsonObj.get("identifierValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `identifierValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierValue").toString()));
      }
      if (!jsonObj.get("foreignID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `foreignID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignID").toString()));
      }
      if (!jsonObj.get("avatarURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `avatarURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarURL").toString()));
      }
      if (!jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SocialAccountCreateReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SocialAccountCreateReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SocialAccountCreateReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SocialAccountCreateReq.class));

       return (TypeAdapter<T>) new TypeAdapter<SocialAccountCreateReq>() {
           @Override
           public void write(JsonWriter out, SocialAccountCreateReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SocialAccountCreateReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SocialAccountCreateReq instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SocialAccountCreateReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SocialAccountCreateReq
   * @throws IOException if the JSON string is invalid with respect to SocialAccountCreateReq
   */
  public static SocialAccountCreateReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SocialAccountCreateReq.class);
  }

  /**
   * Convert an instance of SocialAccountCreateReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

