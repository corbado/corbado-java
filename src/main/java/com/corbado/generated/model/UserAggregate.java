/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.Identifier;
import com.corbado.generated.model.SocialAccount;
import com.corbado.generated.model.UserStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * UserAggregate
 */
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:20:08.389669505Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class UserAggregate {
  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  @javax.annotation.Nonnull
  private String userID;

  public static final String SERIALIZED_NAME_FULL_NAME = "fullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  @javax.annotation.Nullable
  private String fullName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private UserStatus status;

  public static final String SERIALIZED_NAME_EXPLICIT_WEBAUTHN_I_D = "explicitWebauthnID";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_WEBAUTHN_I_D)
  @javax.annotation.Nullable
  private String explicitWebauthnID;

  public static final String SERIALIZED_NAME_EMAIL_IDENTIFIERS = "emailIdentifiers";
  @SerializedName(SERIALIZED_NAME_EMAIL_IDENTIFIERS)
  @javax.annotation.Nonnull
  private List<Identifier> emailIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE_NUMBER_IDENTIFIERS = "phoneNumberIdentifiers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_IDENTIFIERS)
  @javax.annotation.Nonnull
  private List<Identifier> phoneNumberIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERNAME_IDENTIFIERS = "usernameIdentifiers";
  @SerializedName(SERIALIZED_NAME_USERNAME_IDENTIFIERS)
  @javax.annotation.Nonnull
  private List<Identifier> usernameIdentifiers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOCIAL_ACCOUNTS = "socialAccounts";
  @SerializedName(SERIALIZED_NAME_SOCIAL_ACCOUNTS)
  @javax.annotation.Nonnull
  private List<SocialAccount> socialAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nonnull
  private String created;

  public static final String SERIALIZED_NAME_CREATED_M_S = "createdMS";
  @SerializedName(SERIALIZED_NAME_CREATED_M_S)
  @javax.annotation.Nonnull
  private Long createdMS;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  @javax.annotation.Nonnull
  private String updated;

  public static final String SERIALIZED_NAME_UPDATED_MS = "updatedMs";
  @SerializedName(SERIALIZED_NAME_UPDATED_MS)
  @javax.annotation.Nonnull
  private Long updatedMs;

  public UserAggregate() {
  }

  public UserAggregate userID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
    return this;
  }

  /**
   * Get userID
   * @return userID
   */
  @javax.annotation.Nonnull
  public String getUserID() {
    return userID;
  }

  public void setUserID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
  }


  public UserAggregate fullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Get fullName
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(@javax.annotation.Nullable String fullName) {
    this.fullName = fullName;
  }


  public UserAggregate status(@javax.annotation.Nonnull UserStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public UserStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull UserStatus status) {
    this.status = status;
  }


  public UserAggregate explicitWebauthnID(@javax.annotation.Nullable String explicitWebauthnID) {
    this.explicitWebauthnID = explicitWebauthnID;
    return this;
  }

  /**
   * Get explicitWebauthnID
   * @return explicitWebauthnID
   */
  @javax.annotation.Nullable
  public String getExplicitWebauthnID() {
    return explicitWebauthnID;
  }

  public void setExplicitWebauthnID(@javax.annotation.Nullable String explicitWebauthnID) {
    this.explicitWebauthnID = explicitWebauthnID;
  }


  public UserAggregate emailIdentifiers(@javax.annotation.Nonnull List<Identifier> emailIdentifiers) {
    this.emailIdentifiers = emailIdentifiers;
    return this;
  }

  public UserAggregate addEmailIdentifiersItem(Identifier emailIdentifiersItem) {
    if (this.emailIdentifiers == null) {
      this.emailIdentifiers = new ArrayList<>();
    }
    this.emailIdentifiers.add(emailIdentifiersItem);
    return this;
  }

  /**
   * Get emailIdentifiers
   * @return emailIdentifiers
   */
  @javax.annotation.Nonnull
  public List<Identifier> getEmailIdentifiers() {
    return emailIdentifiers;
  }

  public void setEmailIdentifiers(@javax.annotation.Nonnull List<Identifier> emailIdentifiers) {
    this.emailIdentifiers = emailIdentifiers;
  }


  public UserAggregate phoneNumberIdentifiers(@javax.annotation.Nonnull List<Identifier> phoneNumberIdentifiers) {
    this.phoneNumberIdentifiers = phoneNumberIdentifiers;
    return this;
  }

  public UserAggregate addPhoneNumberIdentifiersItem(Identifier phoneNumberIdentifiersItem) {
    if (this.phoneNumberIdentifiers == null) {
      this.phoneNumberIdentifiers = new ArrayList<>();
    }
    this.phoneNumberIdentifiers.add(phoneNumberIdentifiersItem);
    return this;
  }

  /**
   * Get phoneNumberIdentifiers
   * @return phoneNumberIdentifiers
   */
  @javax.annotation.Nonnull
  public List<Identifier> getPhoneNumberIdentifiers() {
    return phoneNumberIdentifiers;
  }

  public void setPhoneNumberIdentifiers(@javax.annotation.Nonnull List<Identifier> phoneNumberIdentifiers) {
    this.phoneNumberIdentifiers = phoneNumberIdentifiers;
  }


  public UserAggregate usernameIdentifiers(@javax.annotation.Nonnull List<Identifier> usernameIdentifiers) {
    this.usernameIdentifiers = usernameIdentifiers;
    return this;
  }

  public UserAggregate addUsernameIdentifiersItem(Identifier usernameIdentifiersItem) {
    if (this.usernameIdentifiers == null) {
      this.usernameIdentifiers = new ArrayList<>();
    }
    this.usernameIdentifiers.add(usernameIdentifiersItem);
    return this;
  }

  /**
   * Get usernameIdentifiers
   * @return usernameIdentifiers
   */
  @javax.annotation.Nonnull
  public List<Identifier> getUsernameIdentifiers() {
    return usernameIdentifiers;
  }

  public void setUsernameIdentifiers(@javax.annotation.Nonnull List<Identifier> usernameIdentifiers) {
    this.usernameIdentifiers = usernameIdentifiers;
  }


  public UserAggregate socialAccounts(@javax.annotation.Nonnull List<SocialAccount> socialAccounts) {
    this.socialAccounts = socialAccounts;
    return this;
  }

  public UserAggregate addSocialAccountsItem(SocialAccount socialAccountsItem) {
    if (this.socialAccounts == null) {
      this.socialAccounts = new ArrayList<>();
    }
    this.socialAccounts.add(socialAccountsItem);
    return this;
  }

  /**
   * Get socialAccounts
   * @return socialAccounts
   */
  @javax.annotation.Nonnull
  public List<SocialAccount> getSocialAccounts() {
    return socialAccounts;
  }

  public void setSocialAccounts(@javax.annotation.Nonnull List<SocialAccount> socialAccounts) {
    this.socialAccounts = socialAccounts;
  }


  public UserAggregate created(@javax.annotation.Nonnull String created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nonnull String created) {
    this.created = created;
  }


  public UserAggregate createdMS(@javax.annotation.Nonnull Long createdMS) {
    this.createdMS = createdMS;
    return this;
  }

  /**
   * Get createdMS
   * @return createdMS
   */
  @javax.annotation.Nonnull
  public Long getCreatedMS() {
    return createdMS;
  }

  public void setCreatedMS(@javax.annotation.Nonnull Long createdMS) {
    this.createdMS = createdMS;
  }


  public UserAggregate updated(@javax.annotation.Nonnull String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Get updated
   * @return updated
   */
  @javax.annotation.Nonnull
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(@javax.annotation.Nonnull String updated) {
    this.updated = updated;
  }


  public UserAggregate updatedMs(@javax.annotation.Nonnull Long updatedMs) {
    this.updatedMs = updatedMs;
    return this;
  }

  /**
   * Get updatedMs
   * @return updatedMs
   */
  @javax.annotation.Nonnull
  public Long getUpdatedMs() {
    return updatedMs;
  }

  public void setUpdatedMs(@javax.annotation.Nonnull Long updatedMs) {
    this.updatedMs = updatedMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAggregate userAggregate = (UserAggregate) o;
    return Objects.equals(this.userID, userAggregate.userID) &&
        Objects.equals(this.fullName, userAggregate.fullName) &&
        Objects.equals(this.status, userAggregate.status) &&
        Objects.equals(this.explicitWebauthnID, userAggregate.explicitWebauthnID) &&
        Objects.equals(this.emailIdentifiers, userAggregate.emailIdentifiers) &&
        Objects.equals(this.phoneNumberIdentifiers, userAggregate.phoneNumberIdentifiers) &&
        Objects.equals(this.usernameIdentifiers, userAggregate.usernameIdentifiers) &&
        Objects.equals(this.socialAccounts, userAggregate.socialAccounts) &&
        Objects.equals(this.created, userAggregate.created) &&
        Objects.equals(this.createdMS, userAggregate.createdMS) &&
        Objects.equals(this.updated, userAggregate.updated) &&
        Objects.equals(this.updatedMs, userAggregate.updatedMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userID, fullName, status, explicitWebauthnID, emailIdentifiers, phoneNumberIdentifiers, usernameIdentifiers, socialAccounts, created, createdMS, updated, updatedMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAggregate {\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    explicitWebauthnID: ").append(toIndentedString(explicitWebauthnID)).append("\n");
    sb.append("    emailIdentifiers: ").append(toIndentedString(emailIdentifiers)).append("\n");
    sb.append("    phoneNumberIdentifiers: ").append(toIndentedString(phoneNumberIdentifiers)).append("\n");
    sb.append("    usernameIdentifiers: ").append(toIndentedString(usernameIdentifiers)).append("\n");
    sb.append("    socialAccounts: ").append(toIndentedString(socialAccounts)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdMS: ").append(toIndentedString(createdMS)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    updatedMs: ").append(toIndentedString(updatedMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("userID", "fullName", "status", "explicitWebauthnID", "emailIdentifiers", "phoneNumberIdentifiers", "usernameIdentifiers", "socialAccounts", "created", "createdMS", "updated", "updatedMs"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("userID", "status", "emailIdentifiers", "phoneNumberIdentifiers", "usernameIdentifiers", "socialAccounts", "created", "createdMS", "updated", "updatedMs"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserAggregate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserAggregate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in UserAggregate is not found in the empty JSON string", UserAggregate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserAggregate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `UserAggregate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserAggregate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      if ((jsonObj.get("fullName") != null && !jsonObj.get("fullName").isJsonNull()) && !jsonObj.get("fullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `fullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullName").toString()));
      }
      // validate the required field `status`
      UserStatus.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("explicitWebauthnID") != null && !jsonObj.get("explicitWebauthnID").isJsonNull()) && !jsonObj.get("explicitWebauthnID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `explicitWebauthnID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("explicitWebauthnID").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("emailIdentifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `emailIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("emailIdentifiers").toString()));
      }

      JsonArray jsonArrayemailIdentifiers = jsonObj.getAsJsonArray("emailIdentifiers");
      // validate the required field `emailIdentifiers` (array)
      for (int i = 0; i < jsonArrayemailIdentifiers.size(); i++) {
        Identifier.validateJsonElement(jsonArrayemailIdentifiers.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("phoneNumberIdentifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `phoneNumberIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("phoneNumberIdentifiers").toString()));
      }

      JsonArray jsonArrayphoneNumberIdentifiers = jsonObj.getAsJsonArray("phoneNumberIdentifiers");
      // validate the required field `phoneNumberIdentifiers` (array)
      for (int i = 0; i < jsonArrayphoneNumberIdentifiers.size(); i++) {
        Identifier.validateJsonElement(jsonArrayphoneNumberIdentifiers.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("usernameIdentifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `usernameIdentifiers` to be an array in the JSON string but got `%s`", jsonObj.get("usernameIdentifiers").toString()));
      }

      JsonArray jsonArrayusernameIdentifiers = jsonObj.getAsJsonArray("usernameIdentifiers");
      // validate the required field `usernameIdentifiers` (array)
      for (int i = 0; i < jsonArrayusernameIdentifiers.size(); i++) {
        Identifier.validateJsonElement(jsonArrayusernameIdentifiers.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("socialAccounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `socialAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("socialAccounts").toString()));
      }

      JsonArray jsonArraysocialAccounts = jsonObj.getAsJsonArray("socialAccounts");
      // validate the required field `socialAccounts` (array)
      for (int i = 0; i < jsonArraysocialAccounts.size(); i++) {
        SocialAccount.validateJsonElement(jsonArraysocialAccounts.get(i));
      };
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      if (!jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserAggregate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserAggregate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserAggregate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserAggregate.class));

       return (TypeAdapter<T>) new TypeAdapter<UserAggregate>() {
           @Override
           public void write(JsonWriter out, UserAggregate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserAggregate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserAggregate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserAggregate
   * @throws IOException if the JSON string is invalid with respect to UserAggregate
   */
  public static UserAggregate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserAggregate.class);
  }

  /**
   * Convert an instance of UserAggregate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

