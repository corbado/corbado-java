/*
 * Corbado Backend API
 *  # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.corbado.generated.invoker.JSON;

/**
 * PasswordManager
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-08T15:52:19.373962904Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class PasswordManager {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  @javax.annotation.Nonnull
  private String userID;

  public static final String SERIALIZED_NAME_CLIENT_ENV_I_D = "clientEnvID";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENV_I_D)
  @javax.annotation.Nonnull
  private String clientEnvID;

  public static final String SERIALIZED_NAME_CREDENTIAL_I_D = "credentialID";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_I_D)
  @javax.annotation.Nonnull
  private String credentialID;

  public static final String SERIALIZED_NAME_AAGUID = "aaguid";
  @SerializedName(SERIALIZED_NAME_AAGUID)
  @javax.annotation.Nonnull
  private String aaguid;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private String status;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  @javax.annotation.Nonnull
  private Integer score;

  public static final String SERIALIZED_NAME_CREATED_MS = "createdMs";
  @SerializedName(SERIALIZED_NAME_CREATED_MS)
  @javax.annotation.Nonnull
  private Long createdMs;

  public PasswordManager() {
  }

  public PasswordManager id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PasswordManager userID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
    return this;
  }

  /**
   * Get userID
   * @return userID
   */
  @javax.annotation.Nonnull
  public String getUserID() {
    return userID;
  }

  public void setUserID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
  }


  public PasswordManager clientEnvID(@javax.annotation.Nonnull String clientEnvID) {
    this.clientEnvID = clientEnvID;
    return this;
  }

  /**
   * Get clientEnvID
   * @return clientEnvID
   */
  @javax.annotation.Nonnull
  public String getClientEnvID() {
    return clientEnvID;
  }

  public void setClientEnvID(@javax.annotation.Nonnull String clientEnvID) {
    this.clientEnvID = clientEnvID;
  }


  public PasswordManager credentialID(@javax.annotation.Nonnull String credentialID) {
    this.credentialID = credentialID;
    return this;
  }

  /**
   * Get credentialID
   * @return credentialID
   */
  @javax.annotation.Nonnull
  public String getCredentialID() {
    return credentialID;
  }

  public void setCredentialID(@javax.annotation.Nonnull String credentialID) {
    this.credentialID = credentialID;
  }


  public PasswordManager aaguid(@javax.annotation.Nonnull String aaguid) {
    this.aaguid = aaguid;
    return this;
  }

  /**
   * Get aaguid
   * @return aaguid
   */
  @javax.annotation.Nonnull
  public String getAaguid() {
    return aaguid;
  }

  public void setAaguid(@javax.annotation.Nonnull String aaguid) {
    this.aaguid = aaguid;
  }


  public PasswordManager status(@javax.annotation.Nonnull String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull String status) {
    this.status = status;
  }


  public PasswordManager score(@javax.annotation.Nonnull Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nonnull
  public Integer getScore() {
    return score;
  }

  public void setScore(@javax.annotation.Nonnull Integer score) {
    this.score = score;
  }


  public PasswordManager createdMs(@javax.annotation.Nonnull Long createdMs) {
    this.createdMs = createdMs;
    return this;
  }

  /**
   * Get createdMs
   * @return createdMs
   */
  @javax.annotation.Nonnull
  public Long getCreatedMs() {
    return createdMs;
  }

  public void setCreatedMs(@javax.annotation.Nonnull Long createdMs) {
    this.createdMs = createdMs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordManager passwordManager = (PasswordManager) o;
    return Objects.equals(this.id, passwordManager.id) &&
        Objects.equals(this.userID, passwordManager.userID) &&
        Objects.equals(this.clientEnvID, passwordManager.clientEnvID) &&
        Objects.equals(this.credentialID, passwordManager.credentialID) &&
        Objects.equals(this.aaguid, passwordManager.aaguid) &&
        Objects.equals(this.status, passwordManager.status) &&
        Objects.equals(this.score, passwordManager.score) &&
        Objects.equals(this.createdMs, passwordManager.createdMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userID, clientEnvID, credentialID, aaguid, status, score, createdMs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordManager {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    clientEnvID: ").append(toIndentedString(clientEnvID)).append("\n");
    sb.append("    credentialID: ").append(toIndentedString(credentialID)).append("\n");
    sb.append("    aaguid: ").append(toIndentedString(aaguid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    createdMs: ").append(toIndentedString(createdMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userID");
    openapiFields.add("clientEnvID");
    openapiFields.add("credentialID");
    openapiFields.add("aaguid");
    openapiFields.add("status");
    openapiFields.add("score");
    openapiFields.add("createdMs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userID");
    openapiRequiredFields.add("clientEnvID");
    openapiRequiredFields.add("credentialID");
    openapiRequiredFields.add("aaguid");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("score");
    openapiRequiredFields.add("createdMs");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasswordManager
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordManager.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordManager is not found in the empty JSON string", PasswordManager.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordManager.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordManager` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PasswordManager.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      if (!jsonObj.get("clientEnvID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEnvID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEnvID").toString()));
      }
      if (!jsonObj.get("credentialID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialID").toString()));
      }
      if (!jsonObj.get("aaguid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aaguid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aaguid").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordManager.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordManager' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordManager> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordManager.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordManager>() {
           @Override
           public void write(JsonWriter out, PasswordManager value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordManager read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasswordManager given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasswordManager
   * @throws IOException if the JSON string is invalid with respect to PasswordManager
   */
  public static PasswordManager fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordManager.class);
  }

  /**
   * Convert an instance of PasswordManager to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

