/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.UserListDefaultResponseAllOfErrorValidationInner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * UserListDefaultResponseAllOfError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T12:37:46.293891551Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class UserListDefaultResponseAllOfError {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  @javax.annotation.Nullable
  private String details;

  public static final String SERIALIZED_NAME_VALIDATION = "validation";
  @SerializedName(SERIALIZED_NAME_VALIDATION)
  @javax.annotation.Nullable
  private List<UserListDefaultResponseAllOfErrorValidationInner> validation = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private List<String> links = new ArrayList<>();

  public UserListDefaultResponseAllOfError() {
  }

  public UserListDefaultResponseAllOfError type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of error
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }


  public UserListDefaultResponseAllOfError details(@javax.annotation.Nullable String details) {
    this.details = details;
    return this;
  }

  /**
   * Details of error
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(@javax.annotation.Nullable String details) {
    this.details = details;
  }


  public UserListDefaultResponseAllOfError validation(@javax.annotation.Nullable List<UserListDefaultResponseAllOfErrorValidationInner> validation) {
    this.validation = validation;
    return this;
  }

  public UserListDefaultResponseAllOfError addValidationItem(UserListDefaultResponseAllOfErrorValidationInner validationItem) {
    if (this.validation == null) {
      this.validation = new ArrayList<>();
    }
    this.validation.add(validationItem);
    return this;
  }

  /**
   * Validation errors per field
   * @return validation
   */
  @javax.annotation.Nullable
  public List<UserListDefaultResponseAllOfErrorValidationInner> getValidation() {
    return validation;
  }

  public void setValidation(@javax.annotation.Nullable List<UserListDefaultResponseAllOfErrorValidationInner> validation) {
    this.validation = validation;
  }


  public UserListDefaultResponseAllOfError links(@javax.annotation.Nullable List<String> links) {
    this.links = links;
    return this;
  }

  public UserListDefaultResponseAllOfError addLinksItem(String linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * Additional links to help understand the error
   * @return links
   */
  @javax.annotation.Nullable
  public List<String> getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable List<String> links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserListDefaultResponseAllOfError userListDefaultResponseAllOfError = (UserListDefaultResponseAllOfError) o;
    return Objects.equals(this.type, userListDefaultResponseAllOfError.type) &&
        Objects.equals(this.details, userListDefaultResponseAllOfError.details) &&
        Objects.equals(this.validation, userListDefaultResponseAllOfError.validation) &&
        Objects.equals(this.links, userListDefaultResponseAllOfError.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, details, validation, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserListDefaultResponseAllOfError {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    validation: ").append(toIndentedString(validation)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("type", "details", "validation", "links"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("type"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserListDefaultResponseAllOfError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserListDefaultResponseAllOfError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in UserListDefaultResponseAllOfError is not found in the empty JSON string", UserListDefaultResponseAllOfError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserListDefaultResponseAllOfError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `UserListDefaultResponseAllOfError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserListDefaultResponseAllOfError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if (jsonObj.get("validation") != null && !jsonObj.get("validation").isJsonNull()) {
        JsonArray jsonArrayvalidation = jsonObj.getAsJsonArray("validation");
        if (jsonArrayvalidation != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validation").isJsonArray()) {
            throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `validation` to be an array in the JSON string but got `%s`", jsonObj.get("validation").toString()));
          }

          // validate the optional field `validation` (array)
          for (int i = 0; i < jsonArrayvalidation.size(); i++) {
            UserListDefaultResponseAllOfErrorValidationInner.validateJsonElement(jsonArrayvalidation.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull() && !jsonObj.get("links").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserListDefaultResponseAllOfError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserListDefaultResponseAllOfError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserListDefaultResponseAllOfError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserListDefaultResponseAllOfError.class));

       return (TypeAdapter<T>) new TypeAdapter<UserListDefaultResponseAllOfError>() {
           @Override
           public void write(JsonWriter out, UserListDefaultResponseAllOfError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserListDefaultResponseAllOfError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserListDefaultResponseAllOfError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserListDefaultResponseAllOfError
   * @throws IOException if the JSON string is invalid with respect to UserListDefaultResponseAllOfError
   */
  public static UserListDefaultResponseAllOfError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserListDefaultResponseAllOfError.class);
  }

  /**
   * Convert an instance of UserListDefaultResponseAllOfError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

