/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * UserListPaging
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T12:37:46.293891551Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class UserListPaging {
  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  @javax.annotation.Nonnull
  private Integer page = 1;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  @javax.annotation.Nonnull
  private Integer totalPages;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS = "totalItems";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS)
  @javax.annotation.Nonnull
  private Integer totalItems;

  public UserListPaging() {
  }

  public UserListPaging page(@javax.annotation.Nonnull Integer page) {
    this.page = page;
    return this;
  }

  /**
   * current page returned in response
   * @return page
   */
  @javax.annotation.Nonnull
  public Integer getPage() {
    return page;
  }

  public void setPage(@javax.annotation.Nonnull Integer page) {
    this.page = page;
  }


  public UserListPaging totalPages(@javax.annotation.Nonnull Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

  /**
   * total number of pages available
   * @return totalPages
   */
  @javax.annotation.Nonnull
  public Integer getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(@javax.annotation.Nonnull Integer totalPages) {
    this.totalPages = totalPages;
  }


  public UserListPaging totalItems(@javax.annotation.Nonnull Integer totalItems) {
    this.totalItems = totalItems;
    return this;
  }

  /**
   * total number of items available
   * @return totalItems
   */
  @javax.annotation.Nonnull
  public Integer getTotalItems() {
    return totalItems;
  }

  public void setTotalItems(@javax.annotation.Nonnull Integer totalItems) {
    this.totalItems = totalItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserListPaging userListPaging = (UserListPaging) o;
    return Objects.equals(this.page, userListPaging.page) &&
        Objects.equals(this.totalPages, userListPaging.totalPages) &&
        Objects.equals(this.totalItems, userListPaging.totalItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(page, totalPages, totalItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserListPaging {\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    totalItems: ").append(toIndentedString(totalItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("page", "totalPages", "totalItems"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("page", "totalPages", "totalItems"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserListPaging
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserListPaging.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in UserListPaging is not found in the empty JSON string", UserListPaging.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserListPaging.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `UserListPaging` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserListPaging.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserListPaging.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserListPaging' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserListPaging> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserListPaging.class));

       return (TypeAdapter<T>) new TypeAdapter<UserListPaging>() {
           @Override
           public void write(JsonWriter out, UserListPaging value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserListPaging read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserListPaging given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserListPaging
   * @throws IOException if the JSON string is invalid with respect to UserListPaging
   */
  public static UserListPaging fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserListPaging.class);
  }

  /**
   * Convert an instance of UserListPaging to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

