/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.WebhookEventType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * WebhookEndpointCreateReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:27:41.845066631Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class WebhookEndpointCreateReq {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  public static final String SERIALIZED_NAME_BASIC_AUTH_USERNAME = "basicAuthUsername";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_USERNAME)
  @javax.annotation.Nullable
  private String basicAuthUsername;

  public static final String SERIALIZED_NAME_BASIC_AUTH_PASSWORD = "basicAuthPassword";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH_PASSWORD)
  @javax.annotation.Nullable
  private String basicAuthPassword;

  public static final String SERIALIZED_NAME_SUBSCRIBED_EVENTS = "subscribedEvents";
  @SerializedName(SERIALIZED_NAME_SUBSCRIBED_EVENTS)
  @javax.annotation.Nonnull
  private List<WebhookEventType> subscribedEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  @javax.annotation.Nonnull
  private Object customHeaders;

  public WebhookEndpointCreateReq() {
  }

  public WebhookEndpointCreateReq url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public WebhookEndpointCreateReq basicAuthUsername(@javax.annotation.Nullable String basicAuthUsername) {
    this.basicAuthUsername = basicAuthUsername;
    return this;
  }

  /**
   * Get basicAuthUsername
   * @return basicAuthUsername
   */
  @javax.annotation.Nullable
  public String getBasicAuthUsername() {
    return basicAuthUsername;
  }

  public void setBasicAuthUsername(@javax.annotation.Nullable String basicAuthUsername) {
    this.basicAuthUsername = basicAuthUsername;
  }


  public WebhookEndpointCreateReq basicAuthPassword(@javax.annotation.Nullable String basicAuthPassword) {
    this.basicAuthPassword = basicAuthPassword;
    return this;
  }

  /**
   * Get basicAuthPassword
   * @return basicAuthPassword
   */
  @javax.annotation.Nullable
  public String getBasicAuthPassword() {
    return basicAuthPassword;
  }

  public void setBasicAuthPassword(@javax.annotation.Nullable String basicAuthPassword) {
    this.basicAuthPassword = basicAuthPassword;
  }


  public WebhookEndpointCreateReq subscribedEvents(@javax.annotation.Nonnull List<WebhookEventType> subscribedEvents) {
    this.subscribedEvents = subscribedEvents;
    return this;
  }

  public WebhookEndpointCreateReq addSubscribedEventsItem(WebhookEventType subscribedEventsItem) {
    if (this.subscribedEvents == null) {
      this.subscribedEvents = new ArrayList<>();
    }
    this.subscribedEvents.add(subscribedEventsItem);
    return this;
  }

  /**
   * Get subscribedEvents
   * @return subscribedEvents
   */
  @javax.annotation.Nonnull
  public List<WebhookEventType> getSubscribedEvents() {
    return subscribedEvents;
  }

  public void setSubscribedEvents(@javax.annotation.Nonnull List<WebhookEventType> subscribedEvents) {
    this.subscribedEvents = subscribedEvents;
  }


  public WebhookEndpointCreateReq customHeaders(@javax.annotation.Nonnull Object customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  /**
   * Get customHeaders
   * @return customHeaders
   */
  @javax.annotation.Nonnull
  public Object getCustomHeaders() {
    return customHeaders;
  }

  public void setCustomHeaders(@javax.annotation.Nonnull Object customHeaders) {
    this.customHeaders = customHeaders;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebhookEndpointCreateReq instance itself
   */
  public WebhookEndpointCreateReq putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEndpointCreateReq webhookEndpointCreateReq = (WebhookEndpointCreateReq) o;
    return Objects.equals(this.url, webhookEndpointCreateReq.url) &&
        Objects.equals(this.basicAuthUsername, webhookEndpointCreateReq.basicAuthUsername) &&
        Objects.equals(this.basicAuthPassword, webhookEndpointCreateReq.basicAuthPassword) &&
        Objects.equals(this.subscribedEvents, webhookEndpointCreateReq.subscribedEvents) &&
        Objects.equals(this.customHeaders, webhookEndpointCreateReq.customHeaders)&&
        Objects.equals(this.additionalProperties, webhookEndpointCreateReq.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, basicAuthUsername, basicAuthPassword, subscribedEvents, customHeaders, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEndpointCreateReq {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    basicAuthUsername: ").append(toIndentedString(basicAuthUsername)).append("\n");
    sb.append("    basicAuthPassword: ").append(toIndentedString(basicAuthPassword)).append("\n");
    sb.append("    subscribedEvents: ").append(toIndentedString(subscribedEvents)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("url", "basicAuthUsername", "basicAuthPassword", "subscribedEvents", "customHeaders"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("url", "subscribedEvents", "customHeaders"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookEndpointCreateReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookEndpointCreateReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in WebhookEndpointCreateReq is not found in the empty JSON string", WebhookEndpointCreateReq.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEndpointCreateReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("basicAuthUsername") != null && !jsonObj.get("basicAuthUsername").isJsonNull()) && !jsonObj.get("basicAuthUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `basicAuthUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basicAuthUsername").toString()));
      }
      if ((jsonObj.get("basicAuthPassword") != null && !jsonObj.get("basicAuthPassword").isJsonNull()) && !jsonObj.get("basicAuthPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `basicAuthPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basicAuthPassword").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("subscribedEvents") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subscribedEvents").isJsonArray()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `subscribedEvents` to be an array in the JSON string but got `%s`", jsonObj.get("subscribedEvents").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEndpointCreateReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEndpointCreateReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEndpointCreateReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEndpointCreateReq.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEndpointCreateReq>() {
           @Override
           public void write(JsonWriter out, WebhookEndpointCreateReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEndpointCreateReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             WebhookEndpointCreateReq instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookEndpointCreateReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookEndpointCreateReq
   * @throws IOException if the JSON string is invalid with respect to WebhookEndpointCreateReq
   */
  public static WebhookEndpointCreateReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEndpointCreateReq.class);
  }

  /**
   * Convert an instance of WebhookEndpointCreateReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

