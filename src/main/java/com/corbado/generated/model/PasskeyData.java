/*
 * Corbado Backend API
 *  # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import com.corbado.generated.model.AaguidDetails;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.corbado.generated.invoker.JSON;

/**
 * PasskeyData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-08T15:52:19.373962904Z[Etc/UTC]", comments = "Generator version: 7.12.0-SNAPSHOT")
public class PasskeyData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  @javax.annotation.Nonnull
  private String userID;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nonnull
  private String username;

  /**
   * Gets or Sets ceremonyType
   */
  @JsonAdapter(CeremonyTypeEnum.Adapter.class)
  public enum CeremonyTypeEnum {
    LOCAL("local"),
    
    CDA("cda"),
    
    SECURITY_KEY("security-key");

    private String value;

    CeremonyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CeremonyTypeEnum fromValue(String value) {
      for (CeremonyTypeEnum b : CeremonyTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CeremonyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CeremonyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CeremonyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CeremonyTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CeremonyTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CEREMONY_TYPE = "ceremonyType";
  @SerializedName(SERIALIZED_NAME_CEREMONY_TYPE)
  @javax.annotation.Nonnull
  private CeremonyTypeEnum ceremonyType;

  public static final String SERIALIZED_NAME_CHALLENGE_I_D = "challengeID";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_I_D)
  @javax.annotation.Nonnull
  private String challengeID;

  public static final String SERIALIZED_NAME_AAGUID_DETAILS = "aaguidDetails";
  @SerializedName(SERIALIZED_NAME_AAGUID_DETAILS)
  @javax.annotation.Nonnull
  private AaguidDetails aaguidDetails;

  public PasskeyData() {
  }

  public PasskeyData id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PasskeyData userID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
    return this;
  }

  /**
   * Get userID
   * @return userID
   */
  @javax.annotation.Nonnull
  public String getUserID() {
    return userID;
  }

  public void setUserID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
  }


  public PasskeyData username(@javax.annotation.Nonnull String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nonnull String username) {
    this.username = username;
  }


  public PasskeyData ceremonyType(@javax.annotation.Nonnull CeremonyTypeEnum ceremonyType) {
    this.ceremonyType = ceremonyType;
    return this;
  }

  /**
   * Get ceremonyType
   * @return ceremonyType
   */
  @javax.annotation.Nonnull
  public CeremonyTypeEnum getCeremonyType() {
    return ceremonyType;
  }

  public void setCeremonyType(@javax.annotation.Nonnull CeremonyTypeEnum ceremonyType) {
    this.ceremonyType = ceremonyType;
  }


  public PasskeyData challengeID(@javax.annotation.Nonnull String challengeID) {
    this.challengeID = challengeID;
    return this;
  }

  /**
   * Get challengeID
   * @return challengeID
   */
  @javax.annotation.Nonnull
  public String getChallengeID() {
    return challengeID;
  }

  public void setChallengeID(@javax.annotation.Nonnull String challengeID) {
    this.challengeID = challengeID;
  }


  public PasskeyData aaguidDetails(@javax.annotation.Nonnull AaguidDetails aaguidDetails) {
    this.aaguidDetails = aaguidDetails;
    return this;
  }

  /**
   * Get aaguidDetails
   * @return aaguidDetails
   */
  @javax.annotation.Nonnull
  public AaguidDetails getAaguidDetails() {
    return aaguidDetails;
  }

  public void setAaguidDetails(@javax.annotation.Nonnull AaguidDetails aaguidDetails) {
    this.aaguidDetails = aaguidDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasskeyData passkeyData = (PasskeyData) o;
    return Objects.equals(this.id, passkeyData.id) &&
        Objects.equals(this.userID, passkeyData.userID) &&
        Objects.equals(this.username, passkeyData.username) &&
        Objects.equals(this.ceremonyType, passkeyData.ceremonyType) &&
        Objects.equals(this.challengeID, passkeyData.challengeID) &&
        Objects.equals(this.aaguidDetails, passkeyData.aaguidDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userID, username, ceremonyType, challengeID, aaguidDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasskeyData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    ceremonyType: ").append(toIndentedString(ceremonyType)).append("\n");
    sb.append("    challengeID: ").append(toIndentedString(challengeID)).append("\n");
    sb.append("    aaguidDetails: ").append(toIndentedString(aaguidDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userID");
    openapiFields.add("username");
    openapiFields.add("ceremonyType");
    openapiFields.add("challengeID");
    openapiFields.add("aaguidDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userID");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("ceremonyType");
    openapiRequiredFields.add("challengeID");
    openapiRequiredFields.add("aaguidDetails");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasskeyData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasskeyData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasskeyData is not found in the empty JSON string", PasskeyData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasskeyData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasskeyData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PasskeyData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("ceremonyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ceremonyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ceremonyType").toString()));
      }
      // validate the required field `ceremonyType`
      CeremonyTypeEnum.validateJsonElement(jsonObj.get("ceremonyType"));
      if (!jsonObj.get("challengeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challengeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challengeID").toString()));
      }
      // validate the required field `aaguidDetails`
      AaguidDetails.validateJsonElement(jsonObj.get("aaguidDetails"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasskeyData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasskeyData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasskeyData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasskeyData.class));

       return (TypeAdapter<T>) new TypeAdapter<PasskeyData>() {
           @Override
           public void write(JsonWriter out, PasskeyData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasskeyData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasskeyData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasskeyData
   * @throws IOException if the JSON string is invalid with respect to PasskeyData
   */
  public static PasskeyData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasskeyData.class);
  }

  /**
   * Convert an instance of PasskeyData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

