/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.DecisionTag;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * DecisionInsightsAppend
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:09:43.911146132Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class DecisionInsightsAppend {
  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nonnull
  private DecisionTag tag;

  public static final String SERIALIZED_NAME_IS_RESTRICTED_BROWSER = "isRestrictedBrowser";
  @SerializedName(SERIALIZED_NAME_IS_RESTRICTED_BROWSER)
  @javax.annotation.Nonnull
  private Boolean isRestrictedBrowser;

  /**
   * Gets or Sets variant
   */
  @JsonAdapter(VariantEnum.Adapter.class)
  public enum VariantEnum {
    DEFAULT("default"),
    
    AFTER_ERROR("after-error"),
    
    AFTER_HYBRID("after-hybrid"),
    
    PASSKEY_LIST("passkey-list"),
    
    AFTER_NO_CREDENTIAL("after-no-credential");

    private String value;

    VariantEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VariantEnum fromValue(String value) {
      for (VariantEnum b : VariantEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VariantEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VariantEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VariantEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VariantEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VariantEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VARIANT = "variant";
  @SerializedName(SERIALIZED_NAME_VARIANT)
  @javax.annotation.Nonnull
  private VariantEnum variant;

  public static final String SERIALIZED_NAME_AUTO = "auto";
  @SerializedName(SERIALIZED_NAME_AUTO)
  @javax.annotation.Nonnull
  private Boolean auto;

  public DecisionInsightsAppend() {
  }

  public DecisionInsightsAppend tag(@javax.annotation.Nonnull DecisionTag tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   * @return tag
   */
  @javax.annotation.Nonnull
  public DecisionTag getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nonnull DecisionTag tag) {
    this.tag = tag;
  }


  public DecisionInsightsAppend isRestrictedBrowser(@javax.annotation.Nonnull Boolean isRestrictedBrowser) {
    this.isRestrictedBrowser = isRestrictedBrowser;
    return this;
  }

  /**
   * Get isRestrictedBrowser
   * @return isRestrictedBrowser
   */
  @javax.annotation.Nonnull
  public Boolean getIsRestrictedBrowser() {
    return isRestrictedBrowser;
  }

  public void setIsRestrictedBrowser(@javax.annotation.Nonnull Boolean isRestrictedBrowser) {
    this.isRestrictedBrowser = isRestrictedBrowser;
  }


  public DecisionInsightsAppend variant(@javax.annotation.Nonnull VariantEnum variant) {
    this.variant = variant;
    return this;
  }

  /**
   * Get variant
   * @return variant
   */
  @javax.annotation.Nonnull
  public VariantEnum getVariant() {
    return variant;
  }

  public void setVariant(@javax.annotation.Nonnull VariantEnum variant) {
    this.variant = variant;
  }


  public DecisionInsightsAppend auto(@javax.annotation.Nonnull Boolean auto) {
    this.auto = auto;
    return this;
  }

  /**
   * Get auto
   * @return auto
   */
  @javax.annotation.Nonnull
  public Boolean getAuto() {
    return auto;
  }

  public void setAuto(@javax.annotation.Nonnull Boolean auto) {
    this.auto = auto;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecisionInsightsAppend decisionInsightsAppend = (DecisionInsightsAppend) o;
    return Objects.equals(this.tag, decisionInsightsAppend.tag) &&
        Objects.equals(this.isRestrictedBrowser, decisionInsightsAppend.isRestrictedBrowser) &&
        Objects.equals(this.variant, decisionInsightsAppend.variant) &&
        Objects.equals(this.auto, decisionInsightsAppend.auto);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tag, isRestrictedBrowser, variant, auto);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecisionInsightsAppend {\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    isRestrictedBrowser: ").append(toIndentedString(isRestrictedBrowser)).append("\n");
    sb.append("    variant: ").append(toIndentedString(variant)).append("\n");
    sb.append("    auto: ").append(toIndentedString(auto)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("tag", "isRestrictedBrowser", "variant", "auto"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("tag", "isRestrictedBrowser", "variant", "auto"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DecisionInsightsAppend
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DecisionInsightsAppend.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in DecisionInsightsAppend is not found in the empty JSON string", DecisionInsightsAppend.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DecisionInsightsAppend.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `DecisionInsightsAppend` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DecisionInsightsAppend.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `tag`
      DecisionTag.validateJsonElement(jsonObj.get("tag"));
      if (!jsonObj.get("variant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `variant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("variant").toString()));
      }
      // validate the required field `variant`
      VariantEnum.validateJsonElement(jsonObj.get("variant"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DecisionInsightsAppend.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DecisionInsightsAppend' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DecisionInsightsAppend> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DecisionInsightsAppend.class));

       return (TypeAdapter<T>) new TypeAdapter<DecisionInsightsAppend>() {
           @Override
           public void write(JsonWriter out, DecisionInsightsAppend value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DecisionInsightsAppend read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DecisionInsightsAppend given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DecisionInsightsAppend
   * @throws IOException if the JSON string is invalid with respect to DecisionInsightsAppend
   */
  public static DecisionInsightsAppend fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecisionInsightsAppend.class);
  }

  /**
   * Convert an instance of DecisionInsightsAppend to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

