/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.ClientInformation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * PasskeyLoginFinishReq
 */
@com.fasterxml.jackson.annotation.JsonIgnoreProperties(ignoreUnknown = true)
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T14:16:45.773957592Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class PasskeyLoginFinishReq {
  public static final String SERIALIZED_NAME_USER_I_D = "userID";
  @SerializedName(SERIALIZED_NAME_USER_I_D)
  @javax.annotation.Nonnull
  private String userID;

  public static final String SERIALIZED_NAME_ASSERTION_RESPONSE = "assertionResponse";
  @SerializedName(SERIALIZED_NAME_ASSERTION_RESPONSE)
  @javax.annotation.Nonnull
  private String assertionResponse;

  public static final String SERIALIZED_NAME_CLIENT_INFORMATION = "clientInformation";
  @SerializedName(SERIALIZED_NAME_CLIENT_INFORMATION)
  @javax.annotation.Nonnull
  private ClientInformation clientInformation;

  public static final String SERIALIZED_NAME_PROCESS_I_D = "processID";
  @SerializedName(SERIALIZED_NAME_PROCESS_I_D)
  @javax.annotation.Nonnull
  private String processID;

  public static final String SERIALIZED_NAME_SIGN_PASSKEY_DATA = "signPasskeyData";
  @SerializedName(SERIALIZED_NAME_SIGN_PASSKEY_DATA)
  @javax.annotation.Nullable
  private Boolean signPasskeyData;

  public static final String SERIALIZED_NAME_TRACKING_I_D = "trackingID";
  @SerializedName(SERIALIZED_NAME_TRACKING_I_D)
  @javax.annotation.Nonnull
  private String trackingID;

  public PasskeyLoginFinishReq() {
  }

  public PasskeyLoginFinishReq userID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
    return this;
  }

  /**
   * ID of the user
   * @return userID
   */
  @javax.annotation.Nonnull
  public String getUserID() {
    return userID;
  }

  public void setUserID(@javax.annotation.Nonnull String userID) {
    this.userID = userID;
  }


  public PasskeyLoginFinishReq assertionResponse(@javax.annotation.Nonnull String assertionResponse) {
    this.assertionResponse = assertionResponse;
    return this;
  }

  /**
   * Get assertionResponse
   * @return assertionResponse
   */
  @javax.annotation.Nonnull
  public String getAssertionResponse() {
    return assertionResponse;
  }

  public void setAssertionResponse(@javax.annotation.Nonnull String assertionResponse) {
    this.assertionResponse = assertionResponse;
  }


  public PasskeyLoginFinishReq clientInformation(@javax.annotation.Nonnull ClientInformation clientInformation) {
    this.clientInformation = clientInformation;
    return this;
  }

  /**
   * Get clientInformation
   * @return clientInformation
   */
  @javax.annotation.Nonnull
  public ClientInformation getClientInformation() {
    return clientInformation;
  }

  public void setClientInformation(@javax.annotation.Nonnull ClientInformation clientInformation) {
    this.clientInformation = clientInformation;
  }


  public PasskeyLoginFinishReq processID(@javax.annotation.Nonnull String processID) {
    this.processID = processID;
    return this;
  }

  /**
   * Get processID
   * @return processID
   */
  @javax.annotation.Nonnull
  public String getProcessID() {
    return processID;
  }

  public void setProcessID(@javax.annotation.Nonnull String processID) {
    this.processID = processID;
  }


  public PasskeyLoginFinishReq signPasskeyData(@javax.annotation.Nullable Boolean signPasskeyData) {
    this.signPasskeyData = signPasskeyData;
    return this;
  }

  /**
   * Get signPasskeyData
   * @return signPasskeyData
   */
  @javax.annotation.Nullable
  public Boolean getSignPasskeyData() {
    return signPasskeyData;
  }

  public void setSignPasskeyData(@javax.annotation.Nullable Boolean signPasskeyData) {
    this.signPasskeyData = signPasskeyData;
  }


  public PasskeyLoginFinishReq trackingID(@javax.annotation.Nonnull String trackingID) {
    this.trackingID = trackingID;
    return this;
  }

  /**
   * Get trackingID
   * @return trackingID
   */
  @javax.annotation.Nonnull
  public String getTrackingID() {
    return trackingID;
  }

  public void setTrackingID(@javax.annotation.Nonnull String trackingID) {
    this.trackingID = trackingID;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PasskeyLoginFinishReq instance itself
   */
  public PasskeyLoginFinishReq putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasskeyLoginFinishReq passkeyLoginFinishReq = (PasskeyLoginFinishReq) o;
    return Objects.equals(this.userID, passkeyLoginFinishReq.userID) &&
        Objects.equals(this.assertionResponse, passkeyLoginFinishReq.assertionResponse) &&
        Objects.equals(this.clientInformation, passkeyLoginFinishReq.clientInformation) &&
        Objects.equals(this.processID, passkeyLoginFinishReq.processID) &&
        Objects.equals(this.signPasskeyData, passkeyLoginFinishReq.signPasskeyData) &&
        Objects.equals(this.trackingID, passkeyLoginFinishReq.trackingID)&&
        Objects.equals(this.additionalProperties, passkeyLoginFinishReq.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userID, assertionResponse, clientInformation, processID, signPasskeyData, trackingID, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasskeyLoginFinishReq {\n");
    sb.append("    userID: ").append(toIndentedString(userID)).append("\n");
    sb.append("    assertionResponse: ").append(toIndentedString(assertionResponse)).append("\n");
    sb.append("    clientInformation: ").append(toIndentedString(clientInformation)).append("\n");
    sb.append("    processID: ").append(toIndentedString(processID)).append("\n");
    sb.append("    signPasskeyData: ").append(toIndentedString(signPasskeyData)).append("\n");
    sb.append("    trackingID: ").append(toIndentedString(trackingID)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("userID", "assertionResponse", "clientInformation", "processID", "signPasskeyData", "trackingID"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("userID", "assertionResponse", "clientInformation", "processID", "trackingID"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasskeyLoginFinishReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasskeyLoginFinishReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in PasskeyLoginFinishReq is not found in the empty JSON string", PasskeyLoginFinishReq.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PasskeyLoginFinishReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("userID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `userID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userID").toString()));
      }
      if (!jsonObj.get("assertionResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `assertionResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assertionResponse").toString()));
      }
      // validate the required field `clientInformation`
      ClientInformation.validateJsonElement(jsonObj.get("clientInformation"));
      if (!jsonObj.get("processID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `processID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processID").toString()));
      }
      if (!jsonObj.get("trackingID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `trackingID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasskeyLoginFinishReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasskeyLoginFinishReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasskeyLoginFinishReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasskeyLoginFinishReq.class));

       return (TypeAdapter<T>) new TypeAdapter<PasskeyLoginFinishReq>() {
           @Override
           public void write(JsonWriter out, PasskeyLoginFinishReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PasskeyLoginFinishReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PasskeyLoginFinishReq instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasskeyLoginFinishReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasskeyLoginFinishReq
   * @throws IOException if the JSON string is invalid with respect to PasskeyLoginFinishReq
   */
  public static PasskeyLoginFinishReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasskeyLoginFinishReq.class);
  }

  /**
   * Convert an instance of PasskeyLoginFinishReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

