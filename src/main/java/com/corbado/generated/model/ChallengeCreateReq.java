/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.model;

import java.util.Objects;
import java.util.Locale;
import com.corbado.generated.model.ChallengeType;
import com.corbado.generated.model.ClientInformation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Locale;

import com.corbado.generated.invoker.JSON;

/**
 * ChallengeCreateReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-09-10T12:37:46.293891551Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ChallengeCreateReq {
  public static final String SERIALIZED_NAME_CHALLENGE_TYPE = "challengeType";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_TYPE)
  @javax.annotation.Nonnull
  private ChallengeType challengeType;

  public static final String SERIALIZED_NAME_IDENTIFIER_VALUE = "identifierValue";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER_VALUE)
  @javax.annotation.Nonnull
  private String identifierValue;

  public static final String SERIALIZED_NAME_CHALLENGE_METADATA = "challengeMetadata";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_METADATA)
  @javax.annotation.Nullable
  private Object challengeMetadata;

  public static final String SERIALIZED_NAME_LIFETIME_SECONDS = "lifetimeSeconds";
  @SerializedName(SERIALIZED_NAME_LIFETIME_SECONDS)
  @javax.annotation.Nullable
  private Integer lifetimeSeconds;

  public static final String SERIALIZED_NAME_CLIENT_INFORMATION = "clientInformation";
  @SerializedName(SERIALIZED_NAME_CLIENT_INFORMATION)
  @javax.annotation.Nonnull
  private ClientInformation clientInformation;

  public ChallengeCreateReq() {
  }

  public ChallengeCreateReq challengeType(@javax.annotation.Nonnull ChallengeType challengeType) {
    this.challengeType = challengeType;
    return this;
  }

  /**
   * Get challengeType
   * @return challengeType
   */
  @javax.annotation.Nonnull
  public ChallengeType getChallengeType() {
    return challengeType;
  }

  public void setChallengeType(@javax.annotation.Nonnull ChallengeType challengeType) {
    this.challengeType = challengeType;
  }


  public ChallengeCreateReq identifierValue(@javax.annotation.Nonnull String identifierValue) {
    this.identifierValue = identifierValue;
    return this;
  }

  /**
   * Get identifierValue
   * @return identifierValue
   */
  @javax.annotation.Nonnull
  public String getIdentifierValue() {
    return identifierValue;
  }

  public void setIdentifierValue(@javax.annotation.Nonnull String identifierValue) {
    this.identifierValue = identifierValue;
  }


  public ChallengeCreateReq challengeMetadata(@javax.annotation.Nullable Object challengeMetadata) {
    this.challengeMetadata = challengeMetadata;
    return this;
  }

  /**
   * Get challengeMetadata
   * @return challengeMetadata
   */
  @javax.annotation.Nullable
  public Object getChallengeMetadata() {
    return challengeMetadata;
  }

  public void setChallengeMetadata(@javax.annotation.Nullable Object challengeMetadata) {
    this.challengeMetadata = challengeMetadata;
  }


  public ChallengeCreateReq lifetimeSeconds(@javax.annotation.Nullable Integer lifetimeSeconds) {
    this.lifetimeSeconds = lifetimeSeconds;
    return this;
  }

  /**
   * Get lifetimeSeconds
   * @return lifetimeSeconds
   */
  @javax.annotation.Nullable
  public Integer getLifetimeSeconds() {
    return lifetimeSeconds;
  }

  public void setLifetimeSeconds(@javax.annotation.Nullable Integer lifetimeSeconds) {
    this.lifetimeSeconds = lifetimeSeconds;
  }


  public ChallengeCreateReq clientInformation(@javax.annotation.Nonnull ClientInformation clientInformation) {
    this.clientInformation = clientInformation;
    return this;
  }

  /**
   * Get clientInformation
   * @return clientInformation
   */
  @javax.annotation.Nonnull
  public ClientInformation getClientInformation() {
    return clientInformation;
  }

  public void setClientInformation(@javax.annotation.Nonnull ClientInformation clientInformation) {
    this.clientInformation = clientInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChallengeCreateReq challengeCreateReq = (ChallengeCreateReq) o;
    return Objects.equals(this.challengeType, challengeCreateReq.challengeType) &&
        Objects.equals(this.identifierValue, challengeCreateReq.identifierValue) &&
        Objects.equals(this.challengeMetadata, challengeCreateReq.challengeMetadata) &&
        Objects.equals(this.lifetimeSeconds, challengeCreateReq.lifetimeSeconds) &&
        Objects.equals(this.clientInformation, challengeCreateReq.clientInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(challengeType, identifierValue, challengeMetadata, lifetimeSeconds, clientInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChallengeCreateReq {\n");
    sb.append("    challengeType: ").append(toIndentedString(challengeType)).append("\n");
    sb.append("    identifierValue: ").append(toIndentedString(identifierValue)).append("\n");
    sb.append("    challengeMetadata: ").append(toIndentedString(challengeMetadata)).append("\n");
    sb.append("    lifetimeSeconds: ").append(toIndentedString(lifetimeSeconds)).append("\n");
    sb.append("    clientInformation: ").append(toIndentedString(clientInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("challengeType", "identifierValue", "challengeMetadata", "lifetimeSeconds", "clientInformation"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("challengeType", "identifierValue", "clientInformation"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChallengeCreateReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChallengeCreateReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field(s) %s in ChallengeCreateReq is not found in the empty JSON string", ChallengeCreateReq.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChallengeCreateReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The field `%s` in the JSON string is not defined in the `ChallengeCreateReq` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChallengeCreateReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format(Locale.ROOT, "The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `challengeType`
      ChallengeType.validateJsonElement(jsonObj.get("challengeType"));
      if (!jsonObj.get("identifierValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format(Locale.ROOT, "Expected the field `identifierValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifierValue").toString()));
      }
      // validate the required field `clientInformation`
      ClientInformation.validateJsonElement(jsonObj.get("clientInformation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChallengeCreateReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChallengeCreateReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChallengeCreateReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChallengeCreateReq.class));

       return (TypeAdapter<T>) new TypeAdapter<ChallengeCreateReq>() {
           @Override
           public void write(JsonWriter out, ChallengeCreateReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChallengeCreateReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChallengeCreateReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChallengeCreateReq
   * @throws IOException if the JSON string is invalid with respect to ChallengeCreateReq
   */
  public static ChallengeCreateReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChallengeCreateReq.class);
  }

  /**
   * Convert an instance of ChallengeCreateReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

