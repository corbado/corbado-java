/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.api;

import com.corbado.generated.invoker.ApiCallback;
import com.corbado.generated.invoker.ApiClient;
import com.corbado.generated.invoker.ApiException;
import com.corbado.generated.invoker.ApiResponse;
import com.corbado.generated.invoker.Configuration;
import com.corbado.generated.invoker.Pair;
import com.corbado.generated.invoker.ProgressRequestBody;
import com.corbado.generated.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.corbado.generated.model.Identifier;
import com.corbado.generated.model.IdentifierCreateReq;
import com.corbado.generated.model.IdentifierList;
import com.corbado.generated.model.IdentifierUpdateReq;
import com.corbado.generated.model.UserDelete200Response;
import com.corbado.generated.model.UserListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentifiersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentifiersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentifiersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for identifierCreate
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierCreateReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierCreateCall(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull IdentifierCreateReq identifierCreateReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identifierCreateReq;

        // create path and map variables
        String localVarPath = "/users/{userID}/identifiers"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identifierCreateValidateBeforeCall(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull IdentifierCreateReq identifierCreateReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling identifierCreate(Async)");
        }

        // verify the required parameter 'identifierCreateReq' is set
        if (identifierCreateReq == null) {
            throw new ApiException("Missing the required parameter 'identifierCreateReq' when calling identifierCreate(Async)");
        }

        return identifierCreateCall(userID, identifierCreateReq, _callback);

    }

    /**
     * Create a login identifier for a user
     * Creates a new login identifier for a user with the given ID. Login identifiers can be of the type &#x60;email&#x60;, &#x60;phone&#x60;, or &#x60;username&#x60;. Separating login identifiers from users allows Corbado to manage multiple login identifiers of different types for each user.  You can set up login identifiers in the [Developer Panel](https://app.corbado.com/settings/userinterface?tab&#x3D;Overview) or consult the [Documentation](/corbado-complete/overview/configuration/user-flow-configuration#2-login-identifiers-and-fallbacks) for more details. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierCreateReq  (required)
     * @return Identifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Identifier identifierCreate(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull IdentifierCreateReq identifierCreateReq) throws ApiException {
        ApiResponse<Identifier> localVarResp = identifierCreateWithHttpInfo(userID, identifierCreateReq);
        return localVarResp.getData();
    }

    /**
     * Create a login identifier for a user
     * Creates a new login identifier for a user with the given ID. Login identifiers can be of the type &#x60;email&#x60;, &#x60;phone&#x60;, or &#x60;username&#x60;. Separating login identifiers from users allows Corbado to manage multiple login identifiers of different types for each user.  You can set up login identifiers in the [Developer Panel](https://app.corbado.com/settings/userinterface?tab&#x3D;Overview) or consult the [Documentation](/corbado-complete/overview/configuration/user-flow-configuration#2-login-identifiers-and-fallbacks) for more details. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierCreateReq  (required)
     * @return ApiResponse&lt;Identifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Identifier> identifierCreateWithHttpInfo(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull IdentifierCreateReq identifierCreateReq) throws ApiException {
        okhttp3.Call localVarCall = identifierCreateValidateBeforeCall(userID, identifierCreateReq, null);
        Type localVarReturnType = new TypeToken<Identifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a login identifier for a user (asynchronously)
     * Creates a new login identifier for a user with the given ID. Login identifiers can be of the type &#x60;email&#x60;, &#x60;phone&#x60;, or &#x60;username&#x60;. Separating login identifiers from users allows Corbado to manage multiple login identifiers of different types for each user.  You can set up login identifiers in the [Developer Panel](https://app.corbado.com/settings/userinterface?tab&#x3D;Overview) or consult the [Documentation](/corbado-complete/overview/configuration/user-flow-configuration#2-login-identifiers-and-fallbacks) for more details. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierCreateReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierCreateAsync(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull IdentifierCreateReq identifierCreateReq, final ApiCallback<Identifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = identifierCreateValidateBeforeCall(userID, identifierCreateReq, _callback);
        Type localVarReturnType = new TypeToken<Identifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identifierDelete
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierDeleteCall(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{userID}/identifiers/{identifierID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "identifierID" + "}", localVarApiClient.escapeString(identifierID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identifierDeleteValidateBeforeCall(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling identifierDelete(Async)");
        }

        // verify the required parameter 'identifierID' is set
        if (identifierID == null) {
            throw new ApiException("Missing the required parameter 'identifierID' when calling identifierDelete(Async)");
        }

        return identifierDeleteCall(userID, identifierID, _callback);

    }

    /**
     * Delete a login identifier for a user
     * Delete an existing login identifier for a user by given &#x60;userID&#x60; and &#x60;identifierID&#x60;. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @return UserDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDelete200Response identifierDelete(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID) throws ApiException {
        ApiResponse<UserDelete200Response> localVarResp = identifierDeleteWithHttpInfo(userID, identifierID);
        return localVarResp.getData();
    }

    /**
     * Delete a login identifier for a user
     * Delete an existing login identifier for a user by given &#x60;userID&#x60; and &#x60;identifierID&#x60;. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @return ApiResponse&lt;UserDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDelete200Response> identifierDeleteWithHttpInfo(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID) throws ApiException {
        okhttp3.Call localVarCall = identifierDeleteValidateBeforeCall(userID, identifierID, null);
        Type localVarReturnType = new TypeToken<UserDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a login identifier for a user (asynchronously)
     * Delete an existing login identifier for a user by given &#x60;userID&#x60; and &#x60;identifierID&#x60;. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierDeleteAsync(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, final ApiCallback<UserDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = identifierDeleteValidateBeforeCall(userID, identifierID, _callback);
        Type localVarReturnType = new TypeToken<UserDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identifierList
     * @param sort Field and direction to sort results. Use the format &#x60;fieldName:asc&#x60; or &#x60;fieldName:desc&#x60;.  (optional)
     * @param filter Filter results by specific fields and conditions. Format: &#x60;&lt;field&gt;:&lt;operator&gt;:&lt;value&gt;&#x60;. Supported operators include:     - &#x60;eq&#x60;: equals (e\\.g\\. &#x60;email:eq:mail@example\\.com&#x60; matches items where email equals mail@example\\.com)     - &#x60;gt&#x60;: greater than (e\\.g\\. &#x60;created:gt:2021-01-01T00:00:00&#x60; matches items created after Jan 1, 2021)     - &#x60;lt&#x60;: less than (e\\.g\\. &#x60;created:lt:2021-01-01T00:00:00&#x60; matches items created before Jan 1, 2021)  (optional)
     * @param page The page number to retrieve for paginated results.  (optional, default to 1)
     * @param pageSize The number of items to return per page. Useful for pagination.  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all matching login identifiers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierListCall(@javax.annotation.Nullable String sort, @javax.annotation.Nullable List<String> filter, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/identifiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter[]", filter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identifierListValidateBeforeCall(@javax.annotation.Nullable String sort, @javax.annotation.Nullable List<String> filter, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, final ApiCallback _callback) throws ApiException {
        return identifierListCall(sort, filter, page, pageSize, _callback);

    }

    /**
     * List all login identifiers
     * Returns a list of login identifiers.  The list can be sorted and filtered: - The &#x60;sort&#x60; parameter supports the following fields: &#x60;userID&#x60;, &#x60;identifierType&#x60; and &#x60;identifierValue&#x60;. - The &#x60;filter&#x60; parameter supports the following fields: &#x60;userID&#x60;, &#x60;identifierType&#x60; and &#x60;identifierValue&#x60;.  Refer to the parameter description for more details on sorting in different directions and using the filter with different operators. 
     * @param sort Field and direction to sort results. Use the format &#x60;fieldName:asc&#x60; or &#x60;fieldName:desc&#x60;.  (optional)
     * @param filter Filter results by specific fields and conditions. Format: &#x60;&lt;field&gt;:&lt;operator&gt;:&lt;value&gt;&#x60;. Supported operators include:     - &#x60;eq&#x60;: equals (e\\.g\\. &#x60;email:eq:mail@example\\.com&#x60; matches items where email equals mail@example\\.com)     - &#x60;gt&#x60;: greater than (e\\.g\\. &#x60;created:gt:2021-01-01T00:00:00&#x60; matches items created after Jan 1, 2021)     - &#x60;lt&#x60;: less than (e\\.g\\. &#x60;created:lt:2021-01-01T00:00:00&#x60; matches items created before Jan 1, 2021)  (optional)
     * @param page The page number to retrieve for paginated results.  (optional, default to 1)
     * @param pageSize The number of items to return per page. Useful for pagination.  (optional, default to 10)
     * @return IdentifierList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all matching login identifiers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public IdentifierList identifierList(@javax.annotation.Nullable String sort, @javax.annotation.Nullable List<String> filter, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        ApiResponse<IdentifierList> localVarResp = identifierListWithHttpInfo(sort, filter, page, pageSize);
        return localVarResp.getData();
    }

    /**
     * List all login identifiers
     * Returns a list of login identifiers.  The list can be sorted and filtered: - The &#x60;sort&#x60; parameter supports the following fields: &#x60;userID&#x60;, &#x60;identifierType&#x60; and &#x60;identifierValue&#x60;. - The &#x60;filter&#x60; parameter supports the following fields: &#x60;userID&#x60;, &#x60;identifierType&#x60; and &#x60;identifierValue&#x60;.  Refer to the parameter description for more details on sorting in different directions and using the filter with different operators. 
     * @param sort Field and direction to sort results. Use the format &#x60;fieldName:asc&#x60; or &#x60;fieldName:desc&#x60;.  (optional)
     * @param filter Filter results by specific fields and conditions. Format: &#x60;&lt;field&gt;:&lt;operator&gt;:&lt;value&gt;&#x60;. Supported operators include:     - &#x60;eq&#x60;: equals (e\\.g\\. &#x60;email:eq:mail@example\\.com&#x60; matches items where email equals mail@example\\.com)     - &#x60;gt&#x60;: greater than (e\\.g\\. &#x60;created:gt:2021-01-01T00:00:00&#x60; matches items created after Jan 1, 2021)     - &#x60;lt&#x60;: less than (e\\.g\\. &#x60;created:lt:2021-01-01T00:00:00&#x60; matches items created before Jan 1, 2021)  (optional)
     * @param page The page number to retrieve for paginated results.  (optional, default to 1)
     * @param pageSize The number of items to return per page. Useful for pagination.  (optional, default to 10)
     * @return ApiResponse&lt;IdentifierList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all matching login identifiers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentifierList> identifierListWithHttpInfo(@javax.annotation.Nullable String sort, @javax.annotation.Nullable List<String> filter, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = identifierListValidateBeforeCall(sort, filter, page, pageSize, null);
        Type localVarReturnType = new TypeToken<IdentifierList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all login identifiers (asynchronously)
     * Returns a list of login identifiers.  The list can be sorted and filtered: - The &#x60;sort&#x60; parameter supports the following fields: &#x60;userID&#x60;, &#x60;identifierType&#x60; and &#x60;identifierValue&#x60;. - The &#x60;filter&#x60; parameter supports the following fields: &#x60;userID&#x60;, &#x60;identifierType&#x60; and &#x60;identifierValue&#x60;.  Refer to the parameter description for more details on sorting in different directions and using the filter with different operators. 
     * @param sort Field and direction to sort results. Use the format &#x60;fieldName:asc&#x60; or &#x60;fieldName:desc&#x60;.  (optional)
     * @param filter Filter results by specific fields and conditions. Format: &#x60;&lt;field&gt;:&lt;operator&gt;:&lt;value&gt;&#x60;. Supported operators include:     - &#x60;eq&#x60;: equals (e\\.g\\. &#x60;email:eq:mail@example\\.com&#x60; matches items where email equals mail@example\\.com)     - &#x60;gt&#x60;: greater than (e\\.g\\. &#x60;created:gt:2021-01-01T00:00:00&#x60; matches items created after Jan 1, 2021)     - &#x60;lt&#x60;: less than (e\\.g\\. &#x60;created:lt:2021-01-01T00:00:00&#x60; matches items created before Jan 1, 2021)  (optional)
     * @param page The page number to retrieve for paginated results.  (optional, default to 1)
     * @param pageSize The number of items to return per page. Useful for pagination.  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all matching login identifiers. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierListAsync(@javax.annotation.Nullable String sort, @javax.annotation.Nullable List<String> filter, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer pageSize, final ApiCallback<IdentifierList> _callback) throws ApiException {

        okhttp3.Call localVarCall = identifierListValidateBeforeCall(sort, filter, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<IdentifierList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identifierUpdate
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @param identifierUpdateReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierUpdateCall(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, @javax.annotation.Nonnull IdentifierUpdateReq identifierUpdateReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identifierUpdateReq;

        // create path and map variables
        String localVarPath = "/users/{userID}/identifiers/{identifierID}"
            .replace("{" + "userID" + "}", localVarApiClient.escapeString(userID.toString()))
            .replace("{" + "identifierID" + "}", localVarApiClient.escapeString(identifierID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identifierUpdateValidateBeforeCall(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, @javax.annotation.Nonnull IdentifierUpdateReq identifierUpdateReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling identifierUpdate(Async)");
        }

        // verify the required parameter 'identifierID' is set
        if (identifierID == null) {
            throw new ApiException("Missing the required parameter 'identifierID' when calling identifierUpdate(Async)");
        }

        // verify the required parameter 'identifierUpdateReq' is set
        if (identifierUpdateReq == null) {
            throw new ApiException("Missing the required parameter 'identifierUpdateReq' when calling identifierUpdate(Async)");
        }

        return identifierUpdateCall(userID, identifierID, identifierUpdateReq, _callback);

    }

    /**
     * Update a login identifier for a user
     * Updates a login identifier (e.g. from &#x60;pending&#x60; to &#x60;verified&#x60;) for a user by given &#x60;userID&#x60; and &#x60;identifierID&#x60;. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @param identifierUpdateReq  (required)
     * @return Identifier
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public Identifier identifierUpdate(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, @javax.annotation.Nonnull IdentifierUpdateReq identifierUpdateReq) throws ApiException {
        ApiResponse<Identifier> localVarResp = identifierUpdateWithHttpInfo(userID, identifierID, identifierUpdateReq);
        return localVarResp.getData();
    }

    /**
     * Update a login identifier for a user
     * Updates a login identifier (e.g. from &#x60;pending&#x60; to &#x60;verified&#x60;) for a user by given &#x60;userID&#x60; and &#x60;identifierID&#x60;. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @param identifierUpdateReq  (required)
     * @return ApiResponse&lt;Identifier&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Identifier> identifierUpdateWithHttpInfo(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, @javax.annotation.Nonnull IdentifierUpdateReq identifierUpdateReq) throws ApiException {
        okhttp3.Call localVarCall = identifierUpdateValidateBeforeCall(userID, identifierID, identifierUpdateReq, null);
        Type localVarReturnType = new TypeToken<Identifier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a login identifier for a user (asynchronously)
     * Updates a login identifier (e.g. from &#x60;pending&#x60; to &#x60;verified&#x60;) for a user by given &#x60;userID&#x60; and &#x60;identifierID&#x60;. 
     * @param userID Unique identifier of the user. Format: &#x60;usr-&lt;number&gt;&#x60;.  (required)
     * @param identifierID Unique identifier of the login identifier (e.g., email address or phone number). Format: &#x60;ide-&lt;number&gt;&#x60;.  (required)
     * @param identifierUpdateReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identifier has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierUpdateAsync(@javax.annotation.Nonnull String userID, @javax.annotation.Nonnull String identifierID, @javax.annotation.Nonnull IdentifierUpdateReq identifierUpdateReq, final ApiCallback<Identifier> _callback) throws ApiException {

        okhttp3.Call localVarCall = identifierUpdateValidateBeforeCall(userID, identifierID, identifierUpdateReq, _callback);
        Type localVarReturnType = new TypeToken<Identifier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
