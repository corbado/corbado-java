/*
 * Corbado Backend API
 * # Introduction This documentation gives an overview of all Corbado Backend API calls to implement passwordless authentication with Passkeys. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@corbado.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.corbado.generated.api;

import com.corbado.generated.invoker.ApiCallback;
import com.corbado.generated.invoker.ApiClient;
import com.corbado.generated.invoker.ApiException;
import com.corbado.generated.invoker.ApiResponse;
import com.corbado.generated.invoker.Configuration;
import com.corbado.generated.invoker.Pair;
import com.corbado.generated.invoker.ProgressRequestBody;
import com.corbado.generated.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.corbado.generated.model.UserDelete200Response;
import com.corbado.generated.model.UserListDefaultResponse;
import com.corbado.generated.model.WebhookEndpoint;
import com.corbado.generated.model.WebhookEndpointCreateReq;
import com.corbado.generated.model.WebhookEndpointList;
import com.corbado.generated.model.WebhookEndpointUpdateReq;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookEndpointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookEndpointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for webhookEndpointCreate
     * @param webhookEndpointCreateReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointCreateCall(@javax.annotation.Nonnull WebhookEndpointCreateReq webhookEndpointCreateReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookEndpointCreateReq;

        // create path and map variables
        String localVarPath = "/webhookEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookEndpointCreateValidateBeforeCall(@javax.annotation.Nonnull WebhookEndpointCreateReq webhookEndpointCreateReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookEndpointCreateReq' is set
        if (webhookEndpointCreateReq == null) {
            throw new ApiException("Missing the required parameter 'webhookEndpointCreateReq' when calling webhookEndpointCreate(Async)");
        }

        return webhookEndpointCreateCall(webhookEndpointCreateReq, _callback);

    }

    /**
     * 
     * Creates a new webhook endpoint
     * @param webhookEndpointCreateReq  (required)
     * @return WebhookEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEndpoint webhookEndpointCreate(@javax.annotation.Nonnull WebhookEndpointCreateReq webhookEndpointCreateReq) throws ApiException {
        ApiResponse<WebhookEndpoint> localVarResp = webhookEndpointCreateWithHttpInfo(webhookEndpointCreateReq);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new webhook endpoint
     * @param webhookEndpointCreateReq  (required)
     * @return ApiResponse&lt;WebhookEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEndpoint> webhookEndpointCreateWithHttpInfo(@javax.annotation.Nonnull WebhookEndpointCreateReq webhookEndpointCreateReq) throws ApiException {
        okhttp3.Call localVarCall = webhookEndpointCreateValidateBeforeCall(webhookEndpointCreateReq, null);
        Type localVarReturnType = new TypeToken<WebhookEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new webhook endpoint
     * @param webhookEndpointCreateReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointCreateAsync(@javax.annotation.Nonnull WebhookEndpointCreateReq webhookEndpointCreateReq, final ApiCallback<WebhookEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookEndpointCreateValidateBeforeCall(webhookEndpointCreateReq, _callback);
        Type localVarReturnType = new TypeToken<WebhookEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookEndpointDelete
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointDeleteCall(@javax.annotation.Nonnull String webhookEndpointID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhookEndpoints/{webhookEndpointID}"
            .replace("{" + "webhookEndpointID" + "}", localVarApiClient.escapeString(webhookEndpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookEndpointDeleteValidateBeforeCall(@javax.annotation.Nonnull String webhookEndpointID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookEndpointID' is set
        if (webhookEndpointID == null) {
            throw new ApiException("Missing the required parameter 'webhookEndpointID' when calling webhookEndpointDelete(Async)");
        }

        return webhookEndpointDeleteCall(webhookEndpointID, _callback);

    }

    /**
     * 
     * Deletes an existing webhook endpoint
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @return UserDelete200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UserDelete200Response webhookEndpointDelete(@javax.annotation.Nonnull String webhookEndpointID) throws ApiException {
        ApiResponse<UserDelete200Response> localVarResp = webhookEndpointDeleteWithHttpInfo(webhookEndpointID);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an existing webhook endpoint
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @return ApiResponse&lt;UserDelete200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserDelete200Response> webhookEndpointDeleteWithHttpInfo(@javax.annotation.Nonnull String webhookEndpointID) throws ApiException {
        okhttp3.Call localVarCall = webhookEndpointDeleteValidateBeforeCall(webhookEndpointID, null);
        Type localVarReturnType = new TypeToken<UserDelete200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an existing webhook endpoint
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointDeleteAsync(@javax.annotation.Nonnull String webhookEndpointID, final ApiCallback<UserDelete200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookEndpointDeleteValidateBeforeCall(webhookEndpointID, _callback);
        Type localVarReturnType = new TypeToken<UserDelete200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookEndpointList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of webhook endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhookEndpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookEndpointListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return webhookEndpointListCall(_callback);

    }

    /**
     * 
     * Returns a list of webhook endpoints
     * @return WebhookEndpointList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of webhook endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEndpointList webhookEndpointList() throws ApiException {
        ApiResponse<WebhookEndpointList> localVarResp = webhookEndpointListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of webhook endpoints
     * @return ApiResponse&lt;WebhookEndpointList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of webhook endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEndpointList> webhookEndpointListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = webhookEndpointListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookEndpointList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of webhook endpoints
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of webhook endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointListAsync(final ApiCallback<WebhookEndpointList> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookEndpointListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookEndpointList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for webhookEndpointUpdate
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @param webhookEndpointUpdateReq  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointUpdateCall(@javax.annotation.Nonnull String webhookEndpointID, @javax.annotation.Nonnull WebhookEndpointUpdateReq webhookEndpointUpdateReq, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookEndpointUpdateReq;

        // create path and map variables
        String localVarPath = "/webhookEndpoints/{webhookEndpointID}"
            .replace("{" + "webhookEndpointID" + "}", localVarApiClient.escapeString(webhookEndpointID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call webhookEndpointUpdateValidateBeforeCall(@javax.annotation.Nonnull String webhookEndpointID, @javax.annotation.Nonnull WebhookEndpointUpdateReq webhookEndpointUpdateReq, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookEndpointID' is set
        if (webhookEndpointID == null) {
            throw new ApiException("Missing the required parameter 'webhookEndpointID' when calling webhookEndpointUpdate(Async)");
        }

        // verify the required parameter 'webhookEndpointUpdateReq' is set
        if (webhookEndpointUpdateReq == null) {
            throw new ApiException("Missing the required parameter 'webhookEndpointUpdateReq' when calling webhookEndpointUpdate(Async)");
        }

        return webhookEndpointUpdateCall(webhookEndpointID, webhookEndpointUpdateReq, _callback);

    }

    /**
     * 
     * Updates an existing webhook endpoint
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @param webhookEndpointUpdateReq  (required)
     * @return WebhookEndpoint
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEndpoint webhookEndpointUpdate(@javax.annotation.Nonnull String webhookEndpointID, @javax.annotation.Nonnull WebhookEndpointUpdateReq webhookEndpointUpdateReq) throws ApiException {
        ApiResponse<WebhookEndpoint> localVarResp = webhookEndpointUpdateWithHttpInfo(webhookEndpointID, webhookEndpointUpdateReq);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing webhook endpoint
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @param webhookEndpointUpdateReq  (required)
     * @return ApiResponse&lt;WebhookEndpoint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEndpoint> webhookEndpointUpdateWithHttpInfo(@javax.annotation.Nonnull String webhookEndpointID, @javax.annotation.Nonnull WebhookEndpointUpdateReq webhookEndpointUpdateReq) throws ApiException {
        okhttp3.Call localVarCall = webhookEndpointUpdateValidateBeforeCall(webhookEndpointID, webhookEndpointUpdateReq, null);
        Type localVarReturnType = new TypeToken<WebhookEndpoint>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing webhook endpoint
     * @param webhookEndpointID ID of a webhook endpoint (required)
     * @param webhookEndpointUpdateReq  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Webhook endpoint has been updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call webhookEndpointUpdateAsync(@javax.annotation.Nonnull String webhookEndpointID, @javax.annotation.Nonnull WebhookEndpointUpdateReq webhookEndpointUpdateReq, final ApiCallback<WebhookEndpoint> _callback) throws ApiException {

        okhttp3.Call localVarCall = webhookEndpointUpdateValidateBeforeCall(webhookEndpointID, webhookEndpointUpdateReq, _callback);
        Type localVarReturnType = new TypeToken<WebhookEndpoint>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
